@inject IRainSensorService rainSensorManager
@inject IJSRuntime jsRuntime

@if (endData is null)
{
    <p>no data</p>

}
else if (endData.isRain == 1)
{
    <div class="card mb-3" style="max-width:1100px;">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="images/raincard.png" class="img-fluid rounded-start" alt="...">
            </div>
            <div class="col-md-8">
                <div class="card-body mb-5">
                    <h1 class="card-title">Son Hava Bilgisi</h1>
                    <h4 class="card-text">Hava Yağmurlu</h4>
                </div>
                <br />
                <div class="card-footer border-0 mt-4">
                    <h5 class="card-text">@endData.Date.ToString("dd/MM/yyyy")</h5>
                </div>
            </div>

        </div>
    </div>
}
else
{
    <div class="card mb-3" style="max-width:1100px;">
        <div class="row g-0">
            <div class="col-md-4">
                <img src="images/notraincard.png" class="img-fluid rounded-start" alt="...">
            </div>
            <div class="col-md-8">
                <div class="card-body mb-5">
                    <h1 class="card-title">Son Hava Bilgisi</h1>
                    <h4 class="card-text">Hava Güneşli</h4>
                </div>
                <br />
                <div class="card-footer border-0 mt-4">
                    <h5 class="card-text">@endData.Date.ToString("dd/MM/yyyy")</h5>
                </div>
            </div>

        </div>
    </div>
}


@code {

    public RainSensor? endData { get; set; }
    private Timer timer;
    public RainSensor? rainSensor { get; set; }

    protected async override Task OnInitializedAsync()
    {
        endData = await rainSensorManager.GetEndData();
        await RainTimer();
    }

    protected async Task RainTimer()
    {
        timer = new Timer(async (_) =>
        {
            GetEndData();
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(3));

    }

    async void GetEndData()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                      endData = await rainSensorManager.GetEndData();

                      StateHasChanged();
            });
        }
        catch
        {

        }


    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}


