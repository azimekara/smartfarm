@inject IMoveSensorService moveSensorManager
@inject IJSRuntime jsRuntime

<div class="row text-center">
    <div class="col-md-4">
        <div class="alert alert-primary" style="height:140px;" role="alert">
            <h5 class="mt-5"> Toplam Hayvan Sayısı: <b> @totalAnimal</b> </h5>
        </div>
    </div>

    <div class="col-md-4">
        <div class="alert alert-primary" style="height:140px;" role="alert">
            <h5 class="mt-5"> İçerideki Hayvan Sayısı: <b> @moveSensor.AnimalNumber </b> </h5>
        </div>
    </div>

    <div class="col-md-4">
        <div class="alert alert-primary" style="height:140px;" role="alert">
            <h5 class="mt-5">  Dışarıdaki Hayvan Sayısı: <b> @(totalAnimal - moveSensor.AnimalNumber) </b> </h5>
        </div>
    </div>

    <div class="col-md-6 pb-5">
        <div class="alert alert-primary" style="height:120px;" role="alert">
            <h5 class="mt-5">  İçerideki Hayvan Yüzdesi: <b> @percentInAnimal </b> </h5>
        </div>
    </div>

    <div class="col-md-6 pb-5">
        <div class="alert alert-primary" style="height:120px;" role="alert">
            <h5 class="mt-5">  Dışarıdaki Hayvan Yüzdesi: <b> @percentOutAnimal</b> </h5>
        </div>
    </div>


</div>


@code {
    int totalAnimal = 9;
    int inAnimalNumber;
    int outAnimalNumber;
    double percentInAnimal;
    double percentOutAnimal;
    //private Timer MoveSensortimer;
    private int count;
    private Timer MoveSensortimer;
    public MoveSensor? moveSensor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        moveSensor = await moveSensorManager.GetEndData();
        inAnimalNumber = moveSensor.AnimalNumber;
        outAnimalNumber = totalAnimal - inAnimalNumber;
        percentInAnimal = (double)inAnimalNumber / totalAnimal * 100;
        percentOutAnimal = (double)outAnimalNumber / totalAnimal * 100;
        await MoveTimer();
    }

    protected async Task MoveTimer()
    {
        MoveSensortimer = new Timer(async (_) =>
        {
            GetEndData();

        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
    }

    async void GetEndData()
    {
        try
        {
            await InvokeAsync(async () =>
            {
                moveSensor = await moveSensorManager.GetEndData();
                inAnimalNumber = moveSensor.AnimalNumber;
                outAnimalNumber = totalAnimal - inAnimalNumber;
                percentInAnimal = (double)inAnimalNumber / totalAnimal * 100;
                percentOutAnimal = (double)outAnimalNumber / totalAnimal * 100;
                StateHasChanged();
            });
        }
        catch
        {

        }

    }


    public void Dispose()
    {
        MoveSensortimer?.Dispose();
    }
}
