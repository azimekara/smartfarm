
webtek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a078  0800a078  0001a078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a094  0800a094  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a09c  0800a09c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000960  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f0  200009f0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c200  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000394d  00000000  00000000  0003c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c8  00000000  00000000  00041318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d02  00000000  00000000  000428e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c480  00000000  00000000  000675e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d43d8  00000000  00000000  00083a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157e3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065f0  00000000  00000000  00157e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a060 	.word	0x0800a060

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a060 	.word	0x0800a060

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t time)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <delay+0x30>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<time);
 8000cba:	bf00      	nop
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <delay+0x30>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d3f9      	bcc.n	8000cbc <delay+0x14>
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000158 	.word	0x20000158
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f1b      	ldrb	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	f040 8083 	bne.w	8000df8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000cf2:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d11a      	bne.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f004 fca1 	bl	8005644 <HAL_TIM_ReadCapturedValue>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a41      	ldr	r2, [pc, #260]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d06:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6a1a      	ldr	r2, [r3, #32]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 020a 	bic.w	r2, r2, #10
 8000d1c:	621a      	str	r2, [r3, #32]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6a1a      	ldr	r2, [r3, #32]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0202 	orr.w	r2, r2, #2
 8000d2c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000d2e:	e063      	b.n	8000df8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d15f      	bne.n	8000df8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000d38:	2100      	movs	r1, #0
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f004 fc82 	bl	8005644 <HAL_TIM_ReadCapturedValue>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d44:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d907      	bls.n	8000d6a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	4a2b      	ldr	r2, [pc, #172]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e00f      	b.n	8000d8a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d84:	33ff      	adds	r3, #255	; 0xff
 8000d86:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d88:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000d8a:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb5c 	bl	800044c <__aeabi_ui2d>
 8000d94:	a31a      	add	r3, pc, #104	; (adr r3, 8000e00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fbd1 	bl	8000540 <__aeabi_dmul>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dae:	f7ff fcf1 	bl	8000794 <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f7ff fdd3 	bl	8000964 <__aeabi_d2uiz>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000dc4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a1a      	ldr	r2, [r3, #32]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 020a 	bic.w	r2, r2, #10
 8000dda:	621a      	str	r2, [r3, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6a12      	ldr	r2, [r2, #32]
 8000de6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0202 	bic.w	r2, r2, #2
 8000df6:	60da      	str	r2, [r3, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	b020c49c 	.word	0xb020c49c
 8000e04:	3fa16872 	.word	0x3fa16872
 8000e08:	200002cc 	.word	0x200002cc
 8000e0c:	200002c0 	.word	0x200002c0
 8000e10:	200002c4 	.word	0x200002c4
 8000e14:	200002c8 	.word	0x200002c8
 8000e18:	200002cd 	.word	0x200002cd
 8000e1c:	20000158 	.word	0x20000158

08000e20 <HCSR04_Read>:
void HCSR04_Read (void)// pe8 trig,pe9 echo
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HCSR04_Read+0x38>)
 8000e2c:	f001 fc8c 	bl	8002748 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000e30:	200a      	movs	r0, #10
 8000e32:	f7ff ff39 	bl	8000ca8 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <HCSR04_Read+0x38>)
 8000e3e:	f001 fc83 	bl	8002748 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HCSR04_Read+0x3c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HCSR04_Read+0x3c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0202 	orr.w	r2, r2, #2
 8000e50:	60da      	str	r2, [r3, #12]
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	20000158 	.word	0x20000158

08000e60 <catikontrol>:

void catikontrol(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t*)data_cati, 1, 100); //uart3 PD8->TX, PD9->RX
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <catikontrol+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2364      	movs	r3, #100	; 0x64
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <catikontrol+0x1c>)
 8000e70:	f005 f8d1 	bl	8006016 <HAL_UART_Transmit>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200002e0 	.word	0x200002e0
 8000e7c:	20000274 	.word	0x20000274

08000e80 <yanginbuzzer>:

void yanginbuzzer(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	//gaz sensoru buzzer
	if(data_yanginbuzzer==1)
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <yanginbuzzer+0x34>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <yanginbuzzer+0x1a>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET); //pc8 gaz buzzerı
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <yanginbuzzer+0x38>)
 8000e94:	f001 fc58 	bl	8002748 <HAL_GPIO_WritePin>
	}
	else if(data_yanginbuzzer==2)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET); //pc8 gaz buzzerı
	}
}
 8000e98:	e009      	b.n	8000eae <yanginbuzzer+0x2e>
	else if(data_yanginbuzzer==2)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <yanginbuzzer+0x34>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d105      	bne.n	8000eae <yanginbuzzer+0x2e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_RESET); //pc8 gaz buzzerı
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <yanginbuzzer+0x38>)
 8000eaa:	f001 fc4d 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002e4 	.word	0x200002e4
 8000eb8:	40020800 	.word	0x40020800

08000ebc <fankontrol>:

void fankontrol(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

	if(data_fan==1)
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <fankontrol+0xf0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d118      	bne.n	8000efa <fankontrol+0x3e>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ece:	4838      	ldr	r0, [pc, #224]	; (8000fb0 <fankontrol+0xf4>)
 8000ed0:	f001 fc3a 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	4835      	ldr	r0, [pc, #212]	; (8000fb0 <fankontrol+0xf4>)
 8000edc:	f001 fc34 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee6:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <fankontrol+0xf4>)
 8000ee8:	f001 fc2e 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	482f      	ldr	r0, [pc, #188]	; (8000fb0 <fankontrol+0xf4>)
 8000ef4:	f001 fc28 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
	}

}
 8000ef8:	e055      	b.n	8000fa6 <fankontrol+0xea>
	else if(data_fan==2)
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <fankontrol+0xf0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d118      	bne.n	8000f34 <fankontrol+0x78>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f08:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <fankontrol+0xf4>)
 8000f0a:	f001 fc1d 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <fankontrol+0xf4>)
 8000f16:	f001 fc17 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <fankontrol+0xf4>)
 8000f22:	f001 fc11 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <fankontrol+0xf4>)
 8000f2e:	f001 fc0b 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000f32:	e038      	b.n	8000fa6 <fankontrol+0xea>
	else if(data_fan==3)
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <fankontrol+0xf0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d118      	bne.n	8000f6e <fankontrol+0xb2>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <fankontrol+0xf4>)
 8000f44:	f001 fc00 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <fankontrol+0xf4>)
 8000f50:	f001 fbfa 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <fankontrol+0xf4>)
 8000f5c:	f001 fbf4 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <fankontrol+0xf4>)
 8000f68:	f001 fbee 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000f6c:	e01b      	b.n	8000fa6 <fankontrol+0xea>
	else if(data_fan==4)
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <fankontrol+0xf0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d117      	bne.n	8000fa6 <fankontrol+0xea>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <fankontrol+0xf4>)
 8000f7e:	f001 fbe3 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <fankontrol+0xf4>)
 8000f8a:	f001 fbdd 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <fankontrol+0xf4>)
 8000f96:	f001 fbd7 	bl	8002748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <fankontrol+0xf4>)
 8000fa2:	f001 fbd1 	bl	8002748 <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002e8 	.word	0x200002e8
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <agilkapisi>:

void agilkapisi(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	if(data_agilkapi == 1)
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <agilkapisi+0x30>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d104      	bne.n	8000fca <agilkapisi+0x16>
	{
		//kapı açmak için
		htim3.Instance->CCR1 = 25;  // duty cycle is 1.5 ms  //pc6
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <agilkapisi+0x34>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2219      	movs	r2, #25
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
		//kapı kapatmak için
		htim3.Instance->CCR1 = 75;  // duty cycle is .5 ms
		//		HAL_Delay(2000);
	}

}
 8000fc8:	e007      	b.n	8000fda <agilkapisi+0x26>
	else if(data_agilkapi == 0)
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <agilkapisi+0x30>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <agilkapisi+0x26>
		htim3.Instance->CCR1 = 75;  // duty cycle is .5 ms
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <agilkapisi+0x34>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	224b      	movs	r2, #75	; 0x4b
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	200002ec 	.word	0x200002ec
 8000fe8:	200001e8 	.word	0x200001e8

08000fec <agilbuzzer>:

void agilbuzzer(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	//agil buzzer
	if(data_agilbuzzer==1)
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <agilbuzzer+0x34>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <agilbuzzer+0x1a>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET); //pe10 agil buzzerı
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <agilbuzzer+0x38>)
 8001000:	f001 fba2 	bl	8002748 <HAL_GPIO_WritePin>
	else if(data_agilbuzzer==0)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET); //pe10 agil buzzerı
	}

}
 8001004:	e009      	b.n	800101a <agilbuzzer+0x2e>
	else if(data_agilbuzzer==0)
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <agilbuzzer+0x34>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <agilbuzzer+0x2e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET); //pe10 agil buzzerı
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <agilbuzzer+0x38>)
 8001016:	f001 fb97 	bl	8002748 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200002f0 	.word	0x200002f0
 8001024:	40021000 	.word	0x40021000

08001028 <yemlik>:

void yemlik(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

	if(data_yem==1)
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <yemlik+0x94>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d110      	bne.n	8001056 <yemlik+0x2e>
	{
		if(13<mesafe_status && mesafe_status<=16)
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <yemlik+0x98>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b0d      	cmp	r3, #13
 800103a:	d935      	bls.n	80010a8 <yemlik+0x80>
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <yemlik+0x98>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b10      	cmp	r3, #16
 8001042:	d831      	bhi.n	80010a8 <yemlik+0x80>
		{
			//kapı açmak için
			htim2.Instance->CCR1 = 25;  // duty cycle is 1.5 ms //pa15
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <yemlik+0x9c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2219      	movs	r2, #25
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(2000);
 800104c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001050:	f001 f890 	bl	8002174 <HAL_Delay>
 8001054:	e028      	b.n	80010a8 <yemlik+0x80>
		}
	}
	else if(data_yem==2)
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <yemlik+0x94>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d110      	bne.n	8001080 <yemlik+0x58>
	{
		if(10<mesafe_status && mesafe_status<=13)
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <yemlik+0x98>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d920      	bls.n	80010a8 <yemlik+0x80>
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <yemlik+0x98>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d81c      	bhi.n	80010a8 <yemlik+0x80>
		{
			//kapı açmak için
			htim2.Instance->CCR1 = 25;  // duty cycle is 1.5 ms
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <yemlik+0x9c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2219      	movs	r2, #25
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(2000);
 8001076:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800107a:	f001 f87b 	bl	8002174 <HAL_Delay>
 800107e:	e013      	b.n	80010a8 <yemlik+0x80>
		}
	}
	else if(data_yem==3)
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <yemlik+0x94>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d10f      	bne.n	80010a8 <yemlik+0x80>
	{
		if(6<mesafe_status && mesafe_status<=10)
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <yemlik+0x98>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d90b      	bls.n	80010a8 <yemlik+0x80>
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <yemlik+0x98>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b0a      	cmp	r3, #10
 8001096:	d807      	bhi.n	80010a8 <yemlik+0x80>
		{
			//kapı açmak için
			htim2.Instance->CCR1 = 25;  // duty cycle is 1.5 ms
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <yemlik+0x9c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2219      	movs	r2, #25
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(2000);
 80010a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a4:	f001 f866 	bl	8002174 <HAL_Delay>
		}

	}
	//kapı kapatma kodu
	htim2.Instance->CCR1 = 75;  // duty cycle is .5 ms
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <yemlik+0x9c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	224b      	movs	r2, #75	; 0x4b
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 80010b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b4:	f001 f85e 	bl	8002174 <HAL_Delay>

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002f4 	.word	0x200002f4
 80010c0:	200002bd 	.word	0x200002bd
 80010c4:	200001a0 	.word	0x200001a0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f000 ffdf 	bl	8002090 <HAL_Init>
   * CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f96b 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fb95 	bl	8001804 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010da:	f000 f9d1 	bl	8001480 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010de:	f000 f9fd 	bl	80014dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010e2:	f008 fb83 	bl	80097ec <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80010e6:	f000 fa2f 	bl	8001548 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ea:	f000 fa83 	bl	80015f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010ee:	f000 fadb 	bl	80016a8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80010f2:	f000 fb33 	bl	800175c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010f6:	f000 fb5b 	bl	80017b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010fa:	2100      	movs	r1, #0
 80010fc:	4896      	ldr	r0, [pc, #600]	; (8001358 <main+0x290>)
 80010fe:	f003 ff13 	bl	8004f28 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	4895      	ldr	r0, [pc, #596]	; (800135c <main+0x294>)
 8001106:	f003 fdf7 	bl	8004cf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4894      	ldr	r0, [pc, #592]	; (8001360 <main+0x298>)
 800110e:	f003 fdf3 	bl	8004cf8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		yagmur_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001112:	2102      	movs	r1, #2
 8001114:	4893      	ldr	r0, [pc, #588]	; (8001364 <main+0x29c>)
 8001116:	f001 faff 	bl	8002718 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b92      	ldr	r3, [pc, #584]	; (8001368 <main+0x2a0>)
 8001120:	701a      	strb	r2, [r3, #0]
		if(yagmur_status==0)
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <main+0x2a0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d103      	bne.n	8001132 <main+0x6a>
		{
			data_send[0]='1';
 800112a:	4b90      	ldr	r3, [pc, #576]	; (800136c <main+0x2a4>)
 800112c:	2231      	movs	r2, #49	; 0x31
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e002      	b.n	8001138 <main+0x70>
		}
		else
		{
			data_send[0]='0';
 8001132:	4b8e      	ldr	r3, [pc, #568]	; (800136c <main+0x2a4>)
 8001134:	2230      	movs	r2, #48	; 0x30
 8001136:	701a      	strb	r2, [r3, #0]
		}

		gaz_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8001138:	2110      	movs	r1, #16
 800113a:	488d      	ldr	r0, [pc, #564]	; (8001370 <main+0x2a8>)
 800113c:	f001 faec 	bl	8002718 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <main+0x2ac>)
 8001146:	801a      	strh	r2, [r3, #0]
		if(gaz_status==0)
 8001148:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <main+0x2ac>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <main+0x90>
		{
			data_send[1]='1';
 8001150:	4b86      	ldr	r3, [pc, #536]	; (800136c <main+0x2a4>)
 8001152:	2231      	movs	r2, #49	; 0x31
 8001154:	705a      	strb	r2, [r3, #1]
 8001156:	e002      	b.n	800115e <main+0x96>
		}
		else
		{
			data_send[1]='0';
 8001158:	4b84      	ldr	r3, [pc, #528]	; (800136c <main+0x2a4>)
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	705a      	strb	r2, [r3, #1]
		}

		touch_status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800115e:	2120      	movs	r1, #32
 8001160:	4883      	ldr	r0, [pc, #524]	; (8001370 <main+0x2a8>)
 8001162:	f001 fad9 	bl	8002718 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b83      	ldr	r3, [pc, #524]	; (8001378 <main+0x2b0>)
 800116c:	701a      	strb	r2, [r3, #0]
		if(touch_status==1)
 800116e:	4b82      	ldr	r3, [pc, #520]	; (8001378 <main+0x2b0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d117      	bne.n	80011a6 <main+0xde>
		{
			count=count+1;
 8001176:	4b81      	ldr	r3, [pc, #516]	; (800137c <main+0x2b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b7f      	ldr	r3, [pc, #508]	; (800137c <main+0x2b4>)
 8001180:	701a      	strb	r2, [r3, #0]

			if(count>9)
 8001182:	4b7e      	ldr	r3, [pc, #504]	; (800137c <main+0x2b4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b09      	cmp	r3, #9
 8001188:	d902      	bls.n	8001190 <main+0xc8>
			{
				count=0;
 800118a:	4b7c      	ldr	r3, [pc, #496]	; (800137c <main+0x2b4>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
			}

			HAL_Delay(500);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f000 ffee 	bl	8002174 <HAL_Delay>
			char c=count+'0';
 8001198:	4b78      	ldr	r3, [pc, #480]	; (800137c <main+0x2b4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3330      	adds	r3, #48	; 0x30
 800119e:	71fb      	strb	r3, [r7, #7]
			data_send[2]=c;
 80011a0:	4a72      	ldr	r2, [pc, #456]	; (800136c <main+0x2a4>)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	7093      	strb	r3, [r2, #2]

		}


		HCSR04_Read();
 80011a6:	f7ff fe3b 	bl	8000e20 <HCSR04_Read>
		HAL_Delay(200);
 80011aa:	20c8      	movs	r0, #200	; 0xc8
 80011ac:	f000 ffe2 	bl	8002174 <HAL_Delay>

		mesafe_status=Distance;
 80011b0:	4b73      	ldr	r3, [pc, #460]	; (8001380 <main+0x2b8>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	4b73      	ldr	r3, [pc, #460]	; (8001384 <main+0x2bc>)
 80011b6:	701a      	strb	r2, [r3, #0]

		if(mesafe_status==16)
 80011b8:	4b72      	ldr	r3, [pc, #456]	; (8001384 <main+0x2bc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d106      	bne.n	80011ce <main+0x106>
		{
			data_send[3]=0+'0';
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <main+0x2a4>)
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	70da      	strb	r2, [r3, #3]
			data_send[4]=0+'0';
 80011c6:	4b69      	ldr	r3, [pc, #420]	; (800136c <main+0x2a4>)
 80011c8:	2230      	movs	r2, #48	; 0x30
 80011ca:	711a      	strb	r2, [r3, #4]
 80011cc:	e06c      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==15)
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <main+0x2bc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d106      	bne.n	80011e4 <main+0x11c>
		{
			data_send[3]=0+'0';
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <main+0x2a4>)
 80011d8:	2230      	movs	r2, #48	; 0x30
 80011da:	70da      	strb	r2, [r3, #3]
			data_send[4]=1+'0';
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <main+0x2a4>)
 80011de:	2231      	movs	r2, #49	; 0x31
 80011e0:	711a      	strb	r2, [r3, #4]
 80011e2:	e061      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==14)
 80011e4:	4b67      	ldr	r3, [pc, #412]	; (8001384 <main+0x2bc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b0e      	cmp	r3, #14
 80011ea:	d106      	bne.n	80011fa <main+0x132>
		{
			data_send[3]=0+'0';
 80011ec:	4b5f      	ldr	r3, [pc, #380]	; (800136c <main+0x2a4>)
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	70da      	strb	r2, [r3, #3]
			data_send[4]=2+'0';
 80011f2:	4b5e      	ldr	r3, [pc, #376]	; (800136c <main+0x2a4>)
 80011f4:	2232      	movs	r2, #50	; 0x32
 80011f6:	711a      	strb	r2, [r3, #4]
 80011f8:	e056      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==13)
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <main+0x2bc>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d106      	bne.n	8001210 <main+0x148>
		{
			data_send[3]=0+'0';
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <main+0x2a4>)
 8001204:	2230      	movs	r2, #48	; 0x30
 8001206:	70da      	strb	r2, [r3, #3]
			data_send[4]=3+'0';
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <main+0x2a4>)
 800120a:	2233      	movs	r2, #51	; 0x33
 800120c:	711a      	strb	r2, [r3, #4]
 800120e:	e04b      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==12)
 8001210:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <main+0x2bc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d106      	bne.n	8001226 <main+0x15e>
		{
			data_send[3]=0+'0';
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <main+0x2a4>)
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	70da      	strb	r2, [r3, #3]
			data_send[4]=4+'0';
 800121e:	4b53      	ldr	r3, [pc, #332]	; (800136c <main+0x2a4>)
 8001220:	2234      	movs	r2, #52	; 0x34
 8001222:	711a      	strb	r2, [r3, #4]
 8001224:	e040      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==11)
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <main+0x2bc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b0b      	cmp	r3, #11
 800122c:	d106      	bne.n	800123c <main+0x174>
		{
			data_send[3]=0+'0';
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <main+0x2a4>)
 8001230:	2230      	movs	r2, #48	; 0x30
 8001232:	70da      	strb	r2, [r3, #3]
			data_send[4]=5+'0';
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <main+0x2a4>)
 8001236:	2235      	movs	r2, #53	; 0x35
 8001238:	711a      	strb	r2, [r3, #4]
 800123a:	e035      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==10)
 800123c:	4b51      	ldr	r3, [pc, #324]	; (8001384 <main+0x2bc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d106      	bne.n	8001252 <main+0x18a>
		{
			data_send[3]=0+'0';
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <main+0x2a4>)
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	70da      	strb	r2, [r3, #3]
			data_send[4]=6+'0';
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <main+0x2a4>)
 800124c:	2236      	movs	r2, #54	; 0x36
 800124e:	711a      	strb	r2, [r3, #4]
 8001250:	e02a      	b.n	80012a8 <main+0x1e0>
		}
		else if(mesafe_status==9)
 8001252:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <main+0x2bc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b09      	cmp	r3, #9
 8001258:	d106      	bne.n	8001268 <main+0x1a0>
		{
			data_send[3]=0+'0';
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x2a4>)
 800125c:	2230      	movs	r2, #48	; 0x30
 800125e:	70da      	strb	r2, [r3, #3]
			data_send[4]=7+'0';
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <main+0x2a4>)
 8001262:	2237      	movs	r2, #55	; 0x37
 8001264:	711a      	strb	r2, [r3, #4]
 8001266:	e01f      	b.n	80012a8 <main+0x1e0>
		}

		else if(mesafe_status==8)
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <main+0x2bc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d106      	bne.n	800127e <main+0x1b6>
		{
			data_send[3]=0+'0';
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <main+0x2a4>)
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	70da      	strb	r2, [r3, #3]
			data_send[4]=8+'0';
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <main+0x2a4>)
 8001278:	2238      	movs	r2, #56	; 0x38
 800127a:	711a      	strb	r2, [r3, #4]
 800127c:	e014      	b.n	80012a8 <main+0x1e0>
		}

		else if(mesafe_status==7)
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <main+0x2bc>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d106      	bne.n	8001294 <main+0x1cc>
		{
			data_send[3]=0+'0';
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <main+0x2a4>)
 8001288:	2230      	movs	r2, #48	; 0x30
 800128a:	70da      	strb	r2, [r3, #3]
			data_send[4]=9+'0';
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <main+0x2a4>)
 800128e:	2239      	movs	r2, #57	; 0x39
 8001290:	711a      	strb	r2, [r3, #4]
 8001292:	e009      	b.n	80012a8 <main+0x1e0>
		}

		else if(mesafe_status<=6)
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <main+0x2bc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b06      	cmp	r3, #6
 800129a:	d805      	bhi.n	80012a8 <main+0x1e0>
		{
			data_send[3]=1+'0';
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <main+0x2a4>)
 800129e:	2231      	movs	r2, #49	; 0x31
 80012a0:	70da      	strb	r2, [r3, #3]
			data_send[4]=0+'0';
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <main+0x2a4>)
 80012a4:	2230      	movs	r2, #48	; 0x30
 80012a6:	711a      	strb	r2, [r3, #4]
		}


		data_send[3]=((mesafe_status)/10)+'0';
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <main+0x2bc>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4a36      	ldr	r2, [pc, #216]	; (8001388 <main+0x2c0>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3330      	adds	r3, #48	; 0x30
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <main+0x2a4>)
 80012bc:	70da      	strb	r2, [r3, #3]
		data_send[4]=((mesafe_status)%10)+'0';
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <main+0x2bc>)
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x2c0>)
 80012c4:	fba3 1302 	umull	r1, r3, r3, r2
 80012c8:	08d9      	lsrs	r1, r3, #3
 80012ca:	460b      	mov	r3, r1
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3330      	adds	r3, #48	; 0x30
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <main+0x2a4>)
 80012dc:	711a      	strb	r2, [r3, #4]

		data_send[5]='>';
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <main+0x2a4>)
 80012e0:	223e      	movs	r2, #62	; 0x3e
 80012e2:	715a      	strb	r2, [r3, #5]

		HAL_UART_Transmit(&huart2, data_send, 6, 100);
 80012e4:	2364      	movs	r3, #100	; 0x64
 80012e6:	2206      	movs	r2, #6
 80012e8:	4920      	ldr	r1, [pc, #128]	; (800136c <main+0x2a4>)
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <main+0x2c4>)
 80012ec:	f004 fe93 	bl	8006016 <HAL_UART_Transmit>

		HAL_UART_Receive(&huart2, data_take, 7,2000); //pa2 tx, pa3 rx
 80012f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012f4:	2207      	movs	r2, #7
 80012f6:	4926      	ldr	r1, [pc, #152]	; (8001390 <main+0x2c8>)
 80012f8:	4824      	ldr	r0, [pc, #144]	; (800138c <main+0x2c4>)
 80012fa:	f004 ff1e 	bl	800613a <HAL_UART_Receive>

		data_cati = data_take[1]-'0';
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <main+0x2c8>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	3b30      	subs	r3, #48	; 0x30
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <main+0x2cc>)
 8001306:	6013      	str	r3, [r2, #0]
		data_yanginbuzzer = data_take[2]-'0';
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <main+0x2c8>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	3b30      	subs	r3, #48	; 0x30
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <main+0x2d0>)
 8001310:	6013      	str	r3, [r2, #0]
		data_fan = data_take[3]-'0';
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <main+0x2c8>)
 8001314:	78db      	ldrb	r3, [r3, #3]
 8001316:	3b30      	subs	r3, #48	; 0x30
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <main+0x2d4>)
 800131a:	6013      	str	r3, [r2, #0]
		data_agilkapi = data_take[4]-'0';
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <main+0x2c8>)
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	3b30      	subs	r3, #48	; 0x30
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <main+0x2d8>)
 8001324:	6013      	str	r3, [r2, #0]
		data_agilbuzzer = data_take[5]-'0';
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <main+0x2c8>)
 8001328:	795b      	ldrb	r3, [r3, #5]
 800132a:	3b30      	subs	r3, #48	; 0x30
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <main+0x2dc>)
 800132e:	6013      	str	r3, [r2, #0]
		data_yem = data_take[6]-'0';
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <main+0x2c8>)
 8001332:	799b      	ldrb	r3, [r3, #6]
 8001334:	3b30      	subs	r3, #48	; 0x30
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <main+0x2e0>)
 8001338:	6013      	str	r3, [r2, #0]


		catikontrol();
 800133a:	f7ff fd91 	bl	8000e60 <catikontrol>
		yanginbuzzer();
 800133e:	f7ff fd9f 	bl	8000e80 <yanginbuzzer>
		fankontrol();
 8001342:	f7ff fdbb 	bl	8000ebc <fankontrol>
		agilkapisi();
 8001346:	f7ff fe35 	bl	8000fb4 <agilkapisi>
		agilbuzzer();
 800134a:	f7ff fe4f 	bl	8000fec <agilbuzzer>
		yemlik();
 800134e:	f7ff fe6b 	bl	8001028 <yemlik>
		//		htim3.Instance->CCR1 = 125;  // duty cycle is 2.5 ms
		//		HAL_Delay(2000);


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001352:	f008 fa71 	bl	8009838 <MX_USB_HOST_Process>
		yagmur_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001356:	e6dc      	b.n	8001112 <main+0x4a>
 8001358:	20000158 	.word	0x20000158
 800135c:	200001a0 	.word	0x200001a0
 8001360:	200001e8 	.word	0x200001e8
 8001364:	40020000 	.word	0x40020000
 8001368:	200002b8 	.word	0x200002b8
 800136c:	200002d8 	.word	0x200002d8
 8001370:	40020800 	.word	0x40020800
 8001374:	200002ba 	.word	0x200002ba
 8001378:	200002bc 	.word	0x200002bc
 800137c:	200002be 	.word	0x200002be
 8001380:	200002cd 	.word	0x200002cd
 8001384:	200002bd 	.word	0x200002bd
 8001388:	cccccccd 	.word	0xcccccccd
 800138c:	20000230 	.word	0x20000230
 8001390:	200002d0 	.word	0x200002d0
 8001394:	200002e0 	.word	0x200002e0
 8001398:	200002e4 	.word	0x200002e4
 800139c:	200002e8 	.word	0x200002e8
 80013a0:	200002ec 	.word	0x200002ec
 80013a4:	200002f0 	.word	0x200002f0
 80013a8:	200002f4 	.word	0x200002f4

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fd4a 	bl	8009e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <SystemClock_Config+0xcc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <SystemClock_Config+0xcc>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <SystemClock_Config+0xd0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <SystemClock_Config+0xd0>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800141c:	2304      	movs	r3, #4
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001420:	2348      	movs	r3, #72	; 0x48
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001428:	2303      	movs	r3, #3
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fef1 	bl	8004218 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800143c:	f000 fb56 	bl	8001aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f952 	bl	8004708 <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800146a:	f000 fb3f 	bl	8001aec <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	; 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C1_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C1_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C1_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C1_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C1_Init+0x50>)
 80014be:	f002 fd67 	bl	8003f90 <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 fb10 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000ac 	.word	0x200000ac
 80014d4:	40005400 	.word	0x40005400
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_SPI1_Init+0x64>)
 80014e2:	4a18      	ldr	r2, [pc, #96]	; (8001544 <MX_SPI1_Init+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI1_Init+0x64>)
 80014e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI1_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_SPI1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI1_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI1_Init+0x64>)
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_SPI1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI1_Init+0x64>)
 8001528:	220a      	movs	r2, #10
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_SPI1_Init+0x64>)
 800152e:	f003 fb0b 	bl	8004b48 <HAL_SPI_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001538:	f000 fad8 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000100 	.word	0x20000100
 8001544:	40013000 	.word	0x40013000

08001548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_TIM1_Init+0xa8>)
 8001568:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_TIM1_Init+0xa4>)
 800156c:	2247      	movs	r2, #71	; 0x47
 800156e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001578:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800157c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM1_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001590:	4816      	ldr	r0, [pc, #88]	; (80015ec <MX_TIM1_Init+0xa4>)
 8001592:	f003 fc79 	bl	8004e88 <HAL_TIM_IC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800159c:	f000 faa6 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <MX_TIM1_Init+0xa4>)
 80015b0:	f004 fc54 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015ba:	f000 fa97 	bl	8001aec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM1_Init+0xa4>)
 80015d6:	f003 fed7 	bl	8005388 <HAL_TIM_IC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80015e0:	f000 fa84 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000158 	.word	0x20000158
 80015f0:	40010000 	.word	0x40010000

080015f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001620:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1199;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM2_Init+0xb0>)
 800162e:	f240 42af 	movw	r2, #1199	; 0x4af
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM2_Init+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001642:	f003 fb0a 	bl	8004c5a <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 fa4e 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4619      	mov	r1, r3
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001660:	f004 fbfc 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800166a:	f000 fa3f 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001686:	f003 ff1b 	bl	80054c0 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001690:	f000 fa2c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM2_Init+0xb0>)
 8001696:	f000 fb6d 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001a0 	.word	0x200001a0

080016a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_TIM3_Init+0xac>)
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <MX_TIM3_Init+0xb0>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1200;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <MX_TIM3_Init+0xac>)
 80016d2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80016d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM3_Init+0xac>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1199;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_TIM3_Init+0xac>)
 80016e0:	f240 42af 	movw	r2, #1199	; 0x4af
 80016e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_TIM3_Init+0xac>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_TIM3_Init+0xac>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f2:	4818      	ldr	r0, [pc, #96]	; (8001754 <MX_TIM3_Init+0xac>)
 80016f4:	f003 fab1 	bl	8004c5a <HAL_TIM_PWM_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016fe:	f000 f9f5 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	4619      	mov	r1, r3
 8001710:	4810      	ldr	r0, [pc, #64]	; (8001754 <MX_TIM3_Init+0xac>)
 8001712:	f004 fba3 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800171c:	f000 f9e6 	bl	8001aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	; 0x60
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <MX_TIM3_Init+0xac>)
 8001738:	f003 fec2 	bl	80054c0 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001742:	f000 f9d3 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <MX_TIM3_Init+0xac>)
 8001748:	f000 fb14 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001e8 	.word	0x200001e8
 8001758:	40000400 	.word	0x40000400

0800175c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_USART2_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001794:	f004 fbf2 	bl	8005f7c <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 f9a5 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000230 	.word	0x20000230
 80017ac:	40004400 	.word	0x40004400

080017b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_USART3_UART_Init+0x50>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART3_UART_Init+0x4c>)
 80017e8:	f004 fbc8 	bl	8005f7c <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017f2:	f000 f97b 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000274 	.word	0x20000274
 8001800:	40004800 	.word	0x40004800

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4aac      	ldr	r2, [pc, #688]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4baa      	ldr	r3, [pc, #680]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4ba6      	ldr	r3, [pc, #664]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4aa5      	ldr	r2, [pc, #660]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4ba3      	ldr	r3, [pc, #652]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b9f      	ldr	r3, [pc, #636]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a9e      	ldr	r2, [pc, #632]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b9c      	ldr	r3, [pc, #624]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b98      	ldr	r3, [pc, #608]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a97      	ldr	r2, [pc, #604]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b95      	ldr	r3, [pc, #596]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b91      	ldr	r3, [pc, #580]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a90      	ldr	r2, [pc, #576]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b8a      	ldr	r3, [pc, #552]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a89      	ldr	r2, [pc, #548]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <MX_GPIO_Init+0x2d0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80018c2:	2200      	movs	r2, #0
 80018c4:	f24f 5138 	movw	r1, #62776	; 0xf538
 80018c8:	4883      	ldr	r0, [pc, #524]	; (8001ad8 <MX_GPIO_Init+0x2d4>)
 80018ca:	f000 ff3d 	bl	8002748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4882      	ldr	r0, [pc, #520]	; (8001adc <MX_GPIO_Init+0x2d8>)
 80018d4:	f000 ff38 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80018de:	4880      	ldr	r0, [pc, #512]	; (8001ae0 <MX_GPIO_Init+0x2dc>)
 80018e0:	f000 ff32 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018e4:	2200      	movs	r2, #0
 80018e6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80018ea:	487e      	ldr	r0, [pc, #504]	; (8001ae4 <MX_GPIO_Init+0x2e0>)
 80018ec:	f000 ff2c 	bl	8002748 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	4879      	ldr	r0, [pc, #484]	; (8001adc <MX_GPIO_Init+0x2d8>)
 80018f8:	f000 ff26 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 PE8
                           PE10 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80018fc:	f24f 5338 	movw	r3, #62776	; 0xf538
 8001900:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4870      	ldr	r0, [pc, #448]	; (8001ad8 <MX_GPIO_Init+0x2d4>)
 8001916:	f000 fd63 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8;
 800191a:	f240 1301 	movw	r3, #257	; 0x101
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	486a      	ldr	r0, [pc, #424]	; (8001adc <MX_GPIO_Init+0x2d8>)
 8001934:	f000 fd54 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001938:	2308      	movs	r3, #8
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001948:	2305      	movs	r3, #5
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4862      	ldr	r0, [pc, #392]	; (8001adc <MX_GPIO_Init+0x2d8>)
 8001954:	f000 fd44 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001958:	2301      	movs	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	485e      	ldr	r0, [pc, #376]	; (8001ae8 <MX_GPIO_Init+0x2e4>)
 800196e:	f000 fd37 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4858      	ldr	r0, [pc, #352]	; (8001ae8 <MX_GPIO_Init+0x2e4>)
 8001986:	f000 fd2b 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800198a:	2310      	movs	r3, #16
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199a:	2306      	movs	r3, #6
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4850      	ldr	r0, [pc, #320]	; (8001ae8 <MX_GPIO_Init+0x2e4>)
 80019a6:	f000 fd1b 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019aa:	2330      	movs	r3, #48	; 0x30
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4847      	ldr	r0, [pc, #284]	; (8001adc <MX_GPIO_Init+0x2d8>)
 80019be:	f000 fd0f 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019c2:	2304      	movs	r3, #4
 80019c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4842      	ldr	r0, [pc, #264]	; (8001ae0 <MX_GPIO_Init+0x2dc>)
 80019d6:	f000 fd03 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ec:	2305      	movs	r3, #5
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	483a      	ldr	r0, [pc, #232]	; (8001ae0 <MX_GPIO_Init+0x2dc>)
 80019f8:	f000 fcf2 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4833      	ldr	r0, [pc, #204]	; (8001ae0 <MX_GPIO_Init+0x2dc>)
 8001a14:	f000 fce4 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001a18:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <MX_GPIO_Init+0x2dc>)
 8001a32:	f000 fcd5 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a36:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a3a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4825      	ldr	r0, [pc, #148]	; (8001ae4 <MX_GPIO_Init+0x2e0>)
 8001a50:	f000 fcc6 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a66:	2306      	movs	r3, #6
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481a      	ldr	r0, [pc, #104]	; (8001adc <MX_GPIO_Init+0x2d8>)
 8001a72:	f000 fcb5 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <MX_GPIO_Init+0x2e4>)
 8001a94:	f000 fca4 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <MX_GPIO_Init+0x2e0>)
 8001aac:	f000 fc98 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ab4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_GPIO_Init+0x2d4>)
 8001ac6:	f000 fc8b 	bl	80023e0 <HAL_GPIO_Init>

}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40020000 	.word	0x40020000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f000 fc10 	bl	800235c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_I2C_MspInit+0x84>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12c      	bne.n	8001bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <HAL_I2C_MspInit+0x8c>)
 8001ba4:	f000 fc1c 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_I2C_MspInit+0x88>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_SPI_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_SPI_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c32:	23e0      	movs	r3, #224	; 0xe0
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c42:	2305      	movs	r3, #5
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_SPI_MspInit+0x8c>)
 8001c4e:	f000 fbc7 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40013000 	.word	0x40013000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_TIM_IC_MspInit+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d134      	bne.n	8001cf4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_TIM_IC_MspInit+0x98>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_TIM_IC_MspInit+0x9c>)
 8001ce0:	f000 fb7e 	bl	80023e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	201b      	movs	r0, #27
 8001cea:	f000 fb42 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cee:	201b      	movs	r0, #27
 8001cf0:	f000 fb5b 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d36:	e012      	b.n	8001d5e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_TIM_PWM_MspInit+0x68>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10d      	bne.n	8001d5e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_TIM_PWM_MspInit+0x64>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40000400 	.word	0x40000400

08001d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d11f      	bne.n	8001dd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4816      	ldr	r0, [pc, #88]	; (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001dd0:	f000 fb06 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dd4:	e022      	b.n	8001e1c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_TIM_MspPostInit+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d11d      	bne.n	8001e1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_TIM_MspPostInit+0xbc>)
 8001e18:	f000 fae2 	bl	80023e0 <HAL_GPIO_Init>
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40020800 	.word	0x40020800

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_UART_MspInit+0xe8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12c      	bne.n	8001eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481e      	ldr	r0, [pc, #120]	; (8001f24 <HAL_UART_MspInit+0xf0>)
 8001eaa:	f000 fa99 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eae:	e031      	b.n	8001f14 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_UART_MspInit+0xf4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12c      	bne.n	8001f14 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_UART_MspInit+0xec>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f04:	2307      	movs	r3, #7
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <HAL_UART_MspInit+0xf8>)
 8001f10:	f000 fa66 	bl	80023e0 <HAL_GPIO_Init>
}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40004800 	.word	0x40004800
 8001f2c:	40020c00 	.word	0x40020c00

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f8da 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM1_CC_IRQHandler+0x10>)
 8001f8a:	f003 f8f5 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000158 	.word	0x20000158

08001f98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <OTG_FS_IRQHandler+0x10>)
 8001f9e:	f000 fe57 	bl	8002c50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200006dc 	.word	0x200006dc

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f007 ff00 	bl	8009de0 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20020000 	.word	0x20020000
 800200c:	00000400 	.word	0x00000400
 8002010:	200002f8 	.word	0x200002f8
 8002014:	200009f0 	.word	0x200009f0

08002018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002042:	490e      	ldr	r1, [pc, #56]	; (800207c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002058:	4c0b      	ldr	r4, [pc, #44]	; (8002088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002066:	f7ff ffd7 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f007 febf 	bl	8009dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7ff f82b 	bl	80010c8 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002080:	0800a0a4 	.word	0x0800a0a4
  ldr r2, =_sbss
 8002084:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002088:	200009f0 	.word	0x200009f0

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_Init+0x40>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_Init+0x40>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_Init+0x40>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f94f 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 f808 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fd18 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f967 	bl	80023c6 <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f92f 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	200002fc 	.word	0x200002fc

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200002fc 	.word	0x200002fc

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_Delay+0x44>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffde 	bl	800215c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008

080021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0b      	blt.n	800224a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4907      	ldr	r1, [pc, #28]	; (8002258 <__NVIC_EnableIRQ+0x38>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db0a      	blt.n	8002286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	490c      	ldr	r1, [pc, #48]	; (80022a8 <__NVIC_SetPriority+0x4c>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	440b      	add	r3, r1
 8002280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002284:	e00a      	b.n	800229c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4908      	ldr	r1, [pc, #32]	; (80022ac <__NVIC_SetPriority+0x50>)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3b04      	subs	r3, #4
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	440b      	add	r3, r1
 800229a:	761a      	strb	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f1c3 0307 	rsb	r3, r3, #7
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf28      	it	cs
 80022ce:	2304      	movcs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d902      	bls.n	80022e0 <NVIC_EncodePriority+0x30>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b03      	subs	r3, #3
 80022de:	e000      	b.n	80022e2 <NVIC_EncodePriority+0x32>
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4313      	orrs	r3, r2
         );
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f7ff ff8e 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff29 	bl	80021bc <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff3e 	bl	8002204 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff8e 	bl	80022b0 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff31 	bl	8002220 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa2 	bl	8002318 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e16b      	b.n	80026d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 815a 	bne.w	80026ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	2b02      	cmp	r3, #2
 8002430:	d130      	bne.n	8002494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 0201 	and.w	r2, r3, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b03      	cmp	r3, #3
 800249e:	d017      	beq.n	80024d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d123      	bne.n	8002524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0203 	and.w	r2, r3, #3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80b4 	beq.w	80026ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b60      	ldr	r3, [pc, #384]	; (80026ec <HAL_GPIO_Init+0x30c>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a5f      	ldr	r2, [pc, #380]	; (80026ec <HAL_GPIO_Init+0x30c>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <HAL_GPIO_Init+0x30c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	4a5b      	ldr	r2, [pc, #364]	; (80026f0 <HAL_GPIO_Init+0x310>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x314>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02b      	beq.n	8002606 <HAL_GPIO_Init+0x226>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_GPIO_Init+0x318>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d025      	beq.n	8002602 <HAL_GPIO_Init+0x222>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_GPIO_Init+0x31c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01f      	beq.n	80025fe <HAL_GPIO_Init+0x21e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_GPIO_Init+0x320>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x21a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_GPIO_Init+0x324>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x216>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x328>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x212>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x32c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x330>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x20a>
 80025e6:	2307      	movs	r3, #7
 80025e8:	e00e      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025ea:	2308      	movs	r3, #8
 80025ec:	e00c      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025ee:	2306      	movs	r3, #6
 80025f0:	e00a      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025f2:	2305      	movs	r3, #5
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x228>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x228>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x228>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <HAL_GPIO_Init+0x310>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_GPIO_Init+0x334>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <HAL_GPIO_Init+0x334>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_GPIO_Init+0x334>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_GPIO_Init+0x334>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_GPIO_Init+0x334>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_GPIO_Init+0x334>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_GPIO_Init+0x334>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <HAL_GPIO_Init+0x334>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f ae90 	bls.w	80023fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40021400 	.word	0x40021400
 800270c:	40021800 	.word	0x40021800
 8002710:	40021c00 	.word	0x40021c00
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800277a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277c:	b08f      	sub	sp, #60	; 0x3c
 800277e:	af0a      	add	r7, sp, #40	; 0x28
 8002780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e054      	b.n	8002836 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f007 f87e 	bl	80098a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 f8ac 	bl	8006928 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	687e      	ldr	r6, [r7, #4]
 80027d8:	466d      	mov	r5, sp
 80027da:	f106 0410 	add.w	r4, r6, #16
 80027de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ee:	1d33      	adds	r3, r6, #4
 80027f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f2:	6838      	ldr	r0, [r7, #0]
 80027f4:	f004 f826 	bl	8006844 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 f8a3 	bl	800694a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	687e      	ldr	r6, [r7, #4]
 800280c:	466d      	mov	r5, sp
 800280e:	f106 0410 	add.w	r4, r6, #16
 8002812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800281e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002822:	1d33      	adds	r3, r6, #4
 8002824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	f004 fa2c 	bl	8006c84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800283e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800283e:	b590      	push	{r4, r7, lr}
 8002840:	b089      	sub	sp, #36	; 0x24
 8002842:	af04      	add	r7, sp, #16
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	4608      	mov	r0, r1
 8002848:	4611      	mov	r1, r2
 800284a:	461a      	mov	r2, r3
 800284c:	4603      	mov	r3, r0
 800284e:	70fb      	strb	r3, [r7, #3]
 8002850:	460b      	mov	r3, r1
 8002852:	70bb      	strb	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_HCD_HC_Init+0x28>
 8002862:	2302      	movs	r3, #2
 8002864:	e076      	b.n	8002954 <HAL_HCD_HC_Init+0x116>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	333d      	adds	r3, #61	; 0x3d
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3338      	adds	r3, #56	; 0x38
 800288e:	787a      	ldrb	r2, [r7, #1]
 8002890:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3340      	adds	r3, #64	; 0x40
 80028a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3339      	adds	r3, #57	; 0x39
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80028c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	78ba      	ldrb	r2, [r7, #2]
 80028ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028d2:	b2d0      	uxtb	r0, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	333a      	adds	r3, #58	; 0x3a
 80028e0:	4602      	mov	r2, r0
 80028e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80028e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da09      	bge.n	8002900 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333b      	adds	r3, #59	; 0x3b
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e008      	b.n	8002912 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	333b      	adds	r3, #59	; 0x3b
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333c      	adds	r3, #60	; 0x3c
 8002920:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002924:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	787c      	ldrb	r4, [r7, #1]
 800292c:	78ba      	ldrb	r2, [r7, #2]
 800292e:	78f9      	ldrb	r1, [r7, #3]
 8002930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4623      	mov	r3, r4
 8002942:	f004 fb25 	bl	8006f90 <USB_HC_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_HCD_HC_Halt+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e00f      	b.n	800299a <HAL_HCD_HC_Halt+0x3e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fd75 	bl	800747a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	70fb      	strb	r3, [r7, #3]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70bb      	strb	r3, [r7, #2]
 80029ba:	4613      	mov	r3, r2
 80029bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333b      	adds	r3, #59	; 0x3b
 80029cc:	78ba      	ldrb	r2, [r7, #2]
 80029ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	333f      	adds	r3, #63	; 0x3f
 80029de:	787a      	ldrb	r2, [r7, #1]
 80029e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80029e2:	7c3b      	ldrb	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d112      	bne.n	8002a0e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3342      	adds	r3, #66	; 0x42
 80029f6:	2203      	movs	r2, #3
 80029f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	333d      	adds	r3, #61	; 0x3d
 8002a08:	7f3a      	ldrb	r2, [r7, #28]
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e008      	b.n	8002a20 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3342      	adds	r3, #66	; 0x42
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a20:	787b      	ldrb	r3, [r7, #1]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	f200 80c6 	bhi.w	8002bb4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002ba1 	.word	0x08002ba1
 8002a38:	08002aa5 	.word	0x08002aa5
 8002a3c:	08002b23 	.word	0x08002b23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a40:	7c3b      	ldrb	r3, [r7, #16]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 80b8 	bne.w	8002bb8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002a48:	78bb      	ldrb	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80b4 	bne.w	8002bb8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002a50:	8b3b      	ldrh	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3355      	adds	r3, #85	; 0x55
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3355      	adds	r3, #85	; 0x55
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a8e:	e093      	b.n	8002bb8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3342      	adds	r3, #66	; 0x42
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
      break;
 8002aa2:	e089      	b.n	8002bb8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002aa4:	78bb      	ldrb	r3, [r7, #2]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d11d      	bne.n	8002ae6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3355      	adds	r3, #85	; 0x55
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3342      	adds	r3, #66	; 0x42
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ad0:	e073      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3342      	adds	r3, #66	; 0x42
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
      break;
 8002ae4:	e069      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3354      	adds	r3, #84	; 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3342      	adds	r3, #66	; 0x42
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
      break;
 8002b0c:	e055      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3342      	adds	r3, #66	; 0x42
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	701a      	strb	r2, [r3, #0]
      break;
 8002b20:	e04b      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b22:	78bb      	ldrb	r3, [r7, #2]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11d      	bne.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3355      	adds	r3, #85	; 0x55
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3342      	adds	r3, #66	; 0x42
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b4e:	e034      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3342      	adds	r3, #66	; 0x42
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
      break;
 8002b62:	e02a      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3342      	adds	r3, #66	; 0x42
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
      break;
 8002b8a:	e016      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3342      	adds	r3, #66	; 0x42
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
      break;
 8002b9e:	e00c      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3342      	adds	r3, #66	; 0x42
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002bb8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3344      	adds	r3, #68	; 0x44
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	8b3a      	ldrh	r2, [r7, #24]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f303 	mul.w	r3, r0, r3
 8002bd8:	440b      	add	r3, r1
 8002bda:	334c      	adds	r3, #76	; 0x4c
 8002bdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3350      	adds	r3, #80	; 0x50
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3339      	adds	r3, #57	; 0x39
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3361      	adds	r3, #97	; 0x61
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	222c      	movs	r2, #44	; 0x2c
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	3338      	adds	r3, #56	; 0x38
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	18d1      	adds	r1, r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f004 fac8 	bl	80071d4 <USB_HC_StartXfer>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop

08002c50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 ffc9 	bl	8006bfe <USB_GetMode>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 80f6 	bne.w	8002e60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 ffad 	bl	8006bd8 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80ec 	beq.w	8002e5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 ffa4 	bl	8006bd8 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9a:	d104      	bne.n	8002ca6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ff94 	bl	8006bd8 <USB_ReadInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cba:	d104      	bne.n	8002cc6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 ff84 	bl	8006bd8 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cda:	d104      	bne.n	8002ce6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ce4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 ff74 	bl	8006bd8 <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 ff66 	bl	8006bd8 <USB_ReadInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d16:	d11c      	bne.n	8002d52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d32:	2110      	movs	r1, #16
 8002d34:	6938      	ldr	r0, [r7, #16]
 8002d36:	f003 fe55 	bl	80069e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d3a:	6938      	ldr	r0, [r7, #16]
 8002d3c:	f003 fe86 	bl	8006a4c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 f85c 	bl	8006e04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f006 fe1b 	bl	8009988 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 ff3e 	bl	8006bd8 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d66:	d102      	bne.n	8002d6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f001 f89e 	bl	8003eaa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 ff30 	bl	8006bd8 <USB_ReadInterrupts>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d106      	bne.n	8002d90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f006 fde4 	bl	8009950 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 ff1f 	bl	8006bd8 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d101      	bne.n	8002da8 <HAL_HCD_IRQHandler+0x158>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_HCD_IRQHandler+0x15a>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0210 	bic.w	r2, r2, #16
 8002dbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 ffa1 	bl	8003d06 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0210 	orr.w	r2, r2, #16
 8002dd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fefd 	bl	8006bd8 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002de8:	d13a      	bne.n	8002e60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fb32 	bl	8007458 <USB_HC_ReadInterrupt>
 8002df4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e025      	b.n	8002e48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d018      	beq.n	8002e42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e26:	d106      	bne.n	8002e36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8ab 	bl	8002f8a <HCD_HC_IN_IRQHandler>
 8002e34:	e005      	b.n	8002e42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fbf9 	bl	8003634 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3d4      	bcc.n	8002dfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5a:	615a      	str	r2, [r3, #20]
 8002e5c:	e000      	b.n	8002e60 <HAL_HCD_IRQHandler+0x210>
      return;
 8002e5e:	bf00      	nop
    }
  }
}
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_HCD_Start+0x16>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e013      	b.n	8002ea4 <HAL_HCD_Start+0x3e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 f81e 	bl	8006ecc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fd36 	bl	8006906 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_HCD_Stop+0x16>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e00d      	b.n	8002ede <HAL_HCD_Stop+0x32>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fc0c 	bl	80076ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 ffc0 	bl	8006e78 <USB_ResetPort>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3360      	adds	r3, #96	; 0x60
 8002f1c:	781b      	ldrb	r3, [r3, #0]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	681b      	ldr	r3, [r3, #0]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 f804 	bl	8006f6c <USB_GetCurrentFrame>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 ffdf 	bl	8006f3e <USB_GetHostSpeed>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d11a      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2304      	movs	r3, #4
 8002fca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3361      	adds	r3, #97	; 0x61
 8002fda:	2206      	movs	r2, #6
 8002fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fa46 	bl	800747a <USB_HC_Halt>
 8002fee:	e0af      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003006:	d11b      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3361      	adds	r3, #97	; 0x61
 800302a:	2207      	movs	r2, #7
 800302c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fa1e 	bl	800747a <USB_HC_Halt>
 800303e:	e087      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b20      	cmp	r3, #32
 8003054:	d109      	bne.n	800306a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	2320      	movs	r3, #32
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	e072      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b08      	cmp	r3, #8
 800307e:	d11a      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	2308      	movs	r3, #8
 8003090:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3361      	adds	r3, #97	; 0x61
 80030a0:	2205      	movs	r2, #5
 80030a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 f9e3 	bl	800747a <USB_HC_Halt>
 80030b4:	e04c      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d11b      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3361      	adds	r3, #97	; 0x61
 80030f0:	2208      	movs	r2, #8
 80030f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 f9bb 	bl	800747a <USB_HC_Halt>
 8003104:	e024      	b.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d119      	bne.n	8003150 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3361      	adds	r3, #97	; 0x61
 800313c:	2206      	movs	r2, #6
 800313e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f004 f995 	bl	800747a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003166:	d112      	bne.n	800318e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f004 f981 	bl	800747a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	461a      	mov	r2, r3
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800318c:	e24e      	b.n	800362c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 80df 	bne.w	8003364 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3348      	adds	r3, #72	; 0x48
 80031bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0159      	lsls	r1, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031d0:	1ad2      	subs	r2, r2, r3
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	202c      	movs	r0, #44	; 0x2c
 80031d8:	fb00 f303 	mul.w	r3, r0, r3
 80031dc:	440b      	add	r3, r1
 80031de:	3350      	adds	r3, #80	; 0x50
 80031e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3361      	adds	r3, #97	; 0x61
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	335c      	adds	r3, #92	; 0x5c
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2301      	movs	r3, #1
 8003216:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	333f      	adds	r3, #63	; 0x3f
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	333f      	adds	r3, #63	; 0x3f
 800323a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800323c:	2b02      	cmp	r3, #2
 800323e:	d111      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f004 f915 	bl	800747a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	2310      	movs	r3, #16
 8003260:	6093      	str	r3, [r2, #8]
 8003262:	e03a      	b.n	80032da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	333f      	adds	r3, #63	; 0x3f
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d009      	beq.n	800328c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	333f      	adds	r3, #63	; 0x3f
 8003286:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003288:	2b01      	cmp	r3, #1
 800328a:	d126      	bne.n	80032da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3360      	adds	r3, #96	; 0x60
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b2d9      	uxtb	r1, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f006 fb65 	bl	80099a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12b      	bne.n	800333a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3348      	adds	r3, #72	; 0x48
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	fb00 f202 	mul.w	r2, r0, r2
 80032fc:	440a      	add	r2, r1
 80032fe:	3240      	adds	r2, #64	; 0x40
 8003300:	8812      	ldrh	r2, [r2, #0]
 8003302:	fbb3 f3f2 	udiv	r3, r3, r2
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 818e 	beq.w	800362c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3354      	adds	r3, #84	; 0x54
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2d8      	uxtb	r0, r3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3354      	adds	r3, #84	; 0x54
 8003334:	4602      	mov	r2, r0
 8003336:	701a      	strb	r2, [r3, #0]
}
 8003338:	e178      	b.n	800362c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	3354      	adds	r3, #84	; 0x54
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2d8      	uxtb	r0, r3
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3354      	adds	r3, #84	; 0x54
 800335e:	4602      	mov	r2, r0
 8003360:	701a      	strb	r2, [r3, #0]
}
 8003362:	e163      	b.n	800362c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b02      	cmp	r3, #2
 8003378:	f040 80f6 	bne.w	8003568 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3361      	adds	r3, #97	; 0x61
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d109      	bne.n	80033a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3360      	adds	r3, #96	; 0x60
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e0c9      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3361      	adds	r3, #97	; 0x61
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d109      	bne.n	80033cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	2205      	movs	r2, #5
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e0b5      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3361      	adds	r3, #97	; 0x61
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d009      	beq.n	80033f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3361      	adds	r3, #97	; 0x61
 80033ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d150      	bne.n	8003496 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	335c      	adds	r3, #92	; 0x5c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	202c      	movs	r0, #44	; 0x2c
 800340c:	fb00 f303 	mul.w	r3, r0, r3
 8003410:	440b      	add	r3, r1
 8003412:	335c      	adds	r3, #92	; 0x5c
 8003414:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	335c      	adds	r3, #92	; 0x5c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d912      	bls.n	8003450 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	335c      	adds	r3, #92	; 0x5c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3360      	adds	r3, #96	; 0x60
 800344a:	2204      	movs	r2, #4
 800344c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800344e:	e073      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003478:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003480:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003494:	e050      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3361      	adds	r3, #97	; 0x61
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d122      	bne.n	80034f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3360      	adds	r3, #96	; 0x60
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e023      	b.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3361      	adds	r3, #97	; 0x61
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b07      	cmp	r3, #7
 8003502:	d119      	bne.n	8003538 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	335c      	adds	r3, #92	; 0x5c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	202c      	movs	r0, #44	; 0x2c
 800351c:	fb00 f303 	mul.w	r3, r0, r3
 8003520:	440b      	add	r3, r1
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	2204      	movs	r2, #4
 8003536:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	461a      	mov	r2, r3
 8003546:	2302      	movs	r3, #2
 8003548:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	202c      	movs	r0, #44	; 0x2c
 8003554:	fb00 f303 	mul.w	r3, r0, r3
 8003558:	4413      	add	r3, r2
 800355a:	3360      	adds	r3, #96	; 0x60
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f006 fa1f 	bl	80099a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003566:	e061      	b.n	800362c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d156      	bne.n	800362c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	333f      	adds	r3, #63	; 0x3f
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b03      	cmp	r3, #3
 8003590:	d111      	bne.n	80035b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	335c      	adds	r3, #92	; 0x5c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 ff63 	bl	800747a <USB_HC_Halt>
 80035b4:	e031      	b.n	800361a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	333f      	adds	r3, #63	; 0x3f
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	333f      	adds	r3, #63	; 0x3f
 80035d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d11d      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	335c      	adds	r3, #92	; 0x5c
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d110      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	3361      	adds	r3, #97	; 0x61
 8003606:	2203      	movs	r2, #3
 8003608:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f003 ff30 	bl	800747a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	2310      	movs	r3, #16
 800362a:	6093      	str	r3, [r2, #8]
}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11a      	bne.n	800369a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2304      	movs	r3, #4
 8003674:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	3361      	adds	r3, #97	; 0x61
 8003684:	2206      	movs	r2, #6
 8003686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fef1 	bl	800747a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003698:	e331      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d12e      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	461a      	mov	r2, r3
 80036be:	2320      	movs	r3, #32
 80036c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	333d      	adds	r3, #61	; 0x3d
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 8313 	bne.w	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333d      	adds	r3, #61	; 0x3d
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3360      	adds	r3, #96	; 0x60
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f003 feb7 	bl	800747a <USB_HC_Halt>
}
 800370c:	e2f7      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d112      	bne.n	800374c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	461a      	mov	r2, r3
 8003734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003738:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fe98 	bl	800747a <USB_HC_Halt>
}
 800374a:	e2d8      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d140      	bne.n	80037e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	335c      	adds	r3, #92	; 0x5c
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d111      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	333d      	adds	r3, #61	; 0x3d
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	461a      	mov	r2, r3
 80037aa:	2340      	movs	r3, #64	; 0x40
 80037ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3361      	adds	r3, #97	; 0x61
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 fe4c 	bl	800747a <USB_HC_Halt>
}
 80037e2:	e28c      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d12c      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3361      	adds	r3, #97	; 0x61
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	333d      	adds	r3, #61	; 0x3d
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	335c      	adds	r3, #92	; 0x5c
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f003 fe1d 	bl	800747a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	6093      	str	r3, [r2, #8]
}
 8003852:	e254      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11a      	bne.n	80038a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	2308      	movs	r3, #8
 800387a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3361      	adds	r3, #97	; 0x61
 800388a:	2205      	movs	r2, #5
 800388c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f003 fdee 	bl	800747a <USB_HC_Halt>
}
 800389e:	e22e      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b10      	cmp	r3, #16
 80038b4:	d140      	bne.n	8003938 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	335c      	adds	r3, #92	; 0x5c
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3361      	adds	r3, #97	; 0x61
 80038d6:	2203      	movs	r2, #3
 80038d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	333d      	adds	r3, #61	; 0x3d
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d112      	bne.n	8003914 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	333c      	adds	r3, #60	; 0x3c
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d108      	bne.n	8003914 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	333d      	adds	r3, #61	; 0x3d
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fdab 	bl	800747a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2310      	movs	r3, #16
 8003934:	6093      	str	r3, [r2, #8]
}
 8003936:	e1e2      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d164      	bne.n	8003a18 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d111      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3361      	adds	r3, #97	; 0x61
 8003964:	2206      	movs	r2, #6
 8003966:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fd81 	bl	800747a <USB_HC_Halt>
 8003978:	e044      	b.n	8003a04 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	202c      	movs	r0, #44	; 0x2c
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	440b      	add	r3, r1
 8003998:	335c      	adds	r3, #92	; 0x5c
 800399a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	335c      	adds	r3, #92	; 0x5c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d920      	bls.n	80039f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	335c      	adds	r3, #92	; 0x5c
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	2204      	movs	r2, #4
 80039d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	202c      	movs	r0, #44	; 0x2c
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3360      	adds	r3, #96	; 0x60
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 ffda 	bl	80099a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039f0:	e008      	b.n	8003a04 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3360      	adds	r3, #96	; 0x60
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	6093      	str	r3, [r2, #8]
}
 8003a16:	e172      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d11b      	bne.n	8003a68 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3361      	adds	r3, #97	; 0x61
 8003a3e:	2208      	movs	r2, #8
 8003a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 fd14 	bl	800747a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a64:	6093      	str	r3, [r2, #8]
}
 8003a66:	e14a      	b.n	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	f040 813f 	bne.w	8003cfe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d17d      	bne.n	8003b90 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3360      	adds	r3, #96	; 0x60
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	333f      	adds	r3, #63	; 0x3f
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d00a      	beq.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	333f      	adds	r3, #63	; 0x3f
 8003ac8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	f040 8100 	bne.w	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d113      	bne.n	8003b00 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3355      	adds	r3, #85	; 0x55
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	f083 0301 	eor.w	r3, r3, #1
 8003aec:	b2d8      	uxtb	r0, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	212c      	movs	r1, #44	; 0x2c
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	3355      	adds	r3, #85	; 0x55
 8003afc:	4602      	mov	r2, r0
 8003afe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 80e3 	bne.w	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	334c      	adds	r3, #76	; 0x4c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80d8 	beq.w	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	334c      	adds	r3, #76	; 0x4c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	202c      	movs	r0, #44	; 0x2c
 8003b36:	fb00 f202 	mul.w	r2, r0, r2
 8003b3a:	440a      	add	r2, r1
 8003b3c:	3240      	adds	r2, #64	; 0x40
 8003b3e:	8812      	ldrh	r2, [r2, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	fb00 f202 	mul.w	r2, r0, r2
 8003b4e:	440a      	add	r2, r1
 8003b50:	3240      	adds	r2, #64	; 0x40
 8003b52:	8812      	ldrh	r2, [r2, #0]
 8003b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80b5 	beq.w	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3355      	adds	r3, #85	; 0x55
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2d8      	uxtb	r0, r3
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3355      	adds	r3, #85	; 0x55
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e09f      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3361      	adds	r3, #97	; 0x61
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d109      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3360      	adds	r3, #96	; 0x60
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e08b      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3361      	adds	r3, #97	; 0x61
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d109      	bne.n	8003be0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3360      	adds	r3, #96	; 0x60
 8003bda:	2202      	movs	r2, #2
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e077      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	3361      	adds	r3, #97	; 0x61
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d109      	bne.n	8003c08 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3360      	adds	r3, #96	; 0x60
 8003c02:	2205      	movs	r2, #5
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e063      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3361      	adds	r3, #97	; 0x61
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b06      	cmp	r3, #6
 8003c1a:	d009      	beq.n	8003c30 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3361      	adds	r3, #97	; 0x61
 8003c2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d14f      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	335c      	adds	r3, #92	; 0x5c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	fb00 f303 	mul.w	r3, r0, r3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	335c      	adds	r3, #92	; 0x5c
 8003c50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	335c      	adds	r3, #92	; 0x5c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d912      	bls.n	8003c8c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	335c      	adds	r3, #92	; 0x5c
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	2204      	movs	r2, #4
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e021      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3360      	adds	r3, #96	; 0x60
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cbc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2302      	movs	r3, #2
 8003ce0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	b2d9      	uxtb	r1, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	202c      	movs	r0, #44	; 0x2c
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3360      	adds	r3, #96	; 0x60
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f005 fe53 	bl	80099a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cfe:	bf00      	nop
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	; 0x28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	0c5b      	lsrs	r3, r3, #17
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d004      	beq.n	8003d4c <HCD_RXQLVL_IRQHandler+0x46>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	f000 80a9 	beq.w	8003e9c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d4a:	e0aa      	b.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a6 	beq.w	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3344      	adds	r3, #68	; 0x44
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 809b 	beq.w	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3350      	adds	r3, #80	; 0x50
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	202c      	movs	r0, #44	; 0x2c
 8003d84:	fb00 f303 	mul.w	r3, r0, r3
 8003d88:	440b      	add	r3, r1
 8003d8a:	334c      	adds	r3, #76	; 0x4c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d87a      	bhi.n	8003e88 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3344      	adds	r3, #68	; 0x44
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	b292      	uxth	r2, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f002 febc 	bl	8006b28 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3344      	adds	r3, #68	; 0x44
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	202c      	movs	r0, #44	; 0x2c
 8003dca:	fb00 f303 	mul.w	r3, r0, r3
 8003dce:	440b      	add	r3, r1
 8003dd0:	3344      	adds	r3, #68	; 0x44
 8003dd2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3350      	adds	r3, #80	; 0x50
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	441a      	add	r2, r3
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	202c      	movs	r0, #44	; 0x2c
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	440b      	add	r3, r1
 8003df4:	3350      	adds	r3, #80	; 0x50
 8003df6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	0cdb      	lsrs	r3, r3, #19
 8003e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3340      	adds	r3, #64	; 0x40
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d13c      	bne.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d039      	beq.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e42:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3354      	adds	r3, #84	; 0x54
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2d8      	uxtb	r0, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3354      	adds	r3, #84	; 0x54
 8003e82:	4602      	mov	r2, r0
 8003e84:	701a      	strb	r2, [r3, #0]
      break;
 8003e86:	e00b      	b.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2204      	movs	r2, #4
 8003e98:	701a      	strb	r2, [r3, #0]
      break;
 8003e9a:	e001      	b.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ea0:	bf00      	nop
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3728      	adds	r7, #40	; 0x28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ed6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d10b      	bne.n	8003efa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f005 fd3d 	bl	800996c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d132      	bne.n	8003f6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d126      	bne.n	8003f64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d113      	bne.n	8003f46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f28:	d106      	bne.n	8003f38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f002 ff67 	bl	8006e04 <USB_InitFSLSPClkSel>
 8003f36:	e011      	b.n	8003f5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 ff60 	bl	8006e04 <USB_InitFSLSPClkSel>
 8003f44:	e00a      	b.n	8003f5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d106      	bne.n	8003f5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f54:	461a      	mov	r2, r3
 8003f56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f005 fd2f 	bl	80099c0 <HAL_HCD_PortEnabled_Callback>
 8003f62:	e002      	b.n	8003f6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f005 fd39 	bl	80099dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d103      	bne.n	8003f7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e12b      	b.n	80041fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fdc6 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f000 fd80 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a81      	ldr	r2, [pc, #516]	; (8004204 <HAL_I2C_Init+0x274>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d807      	bhi.n	8004014 <HAL_I2C_Init+0x84>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a80      	ldr	r2, [pc, #512]	; (8004208 <HAL_I2C_Init+0x278>)
 8004008:	4293      	cmp	r3, r2
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e006      	b.n	8004022 <HAL_I2C_Init+0x92>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_I2C_Init+0x27c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	bf94      	ite	ls
 800401c:	2301      	movls	r3, #1
 800401e:	2300      	movhi	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0e7      	b.n	80041fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a78      	ldr	r2, [pc, #480]	; (8004210 <HAL_I2C_Init+0x280>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0c9b      	lsrs	r3, r3, #18
 8004034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a6a      	ldr	r2, [pc, #424]	; (8004204 <HAL_I2C_Init+0x274>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d802      	bhi.n	8004064 <HAL_I2C_Init+0xd4>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3301      	adds	r3, #1
 8004062:	e009      	b.n	8004078 <HAL_I2C_Init+0xe8>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a69      	ldr	r2, [pc, #420]	; (8004214 <HAL_I2C_Init+0x284>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	3301      	adds	r3, #1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	430b      	orrs	r3, r1
 800407e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800408a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	495c      	ldr	r1, [pc, #368]	; (8004204 <HAL_I2C_Init+0x274>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d819      	bhi.n	80040cc <HAL_I2C_Init+0x13c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e59      	subs	r1, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040ac:	400b      	ands	r3, r1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_I2C_Init+0x138>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1e59      	subs	r1, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	e051      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e04f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d111      	bne.n	80040f8 <HAL_I2C_Init+0x168>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e58      	subs	r0, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e012      	b.n	800411e <HAL_I2C_Init+0x18e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e58      	subs	r0, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	0099      	lsls	r1, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Init+0x196>
 8004122:	2301      	movs	r3, #1
 8004124:	e022      	b.n	800416c <HAL_I2C_Init+0x1dc>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10e      	bne.n	800414c <HAL_I2C_Init+0x1bc>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e58      	subs	r0, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	e00f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	6809      	ldr	r1, [r1, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800419a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6911      	ldr	r1, [r2, #16]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	000186a0 	.word	0x000186a0
 8004208:	001e847f 	.word	0x001e847f
 800420c:	003d08ff 	.word	0x003d08ff
 8004210:	431bde83 	.word	0x431bde83
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e267      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d075      	beq.n	8004322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b85      	ldr	r3, [pc, #532]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424a:	2b08      	cmp	r3, #8
 800424c:	d112      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d05b      	beq.n	8004320 <HAL_RCC_OscConfig+0x108>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d157      	bne.n	8004320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e242      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d106      	bne.n	800428c <HAL_RCC_OscConfig+0x74>
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x98>
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6c      	ldr	r2, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xb0>
 80042b0:	4b69      	ldr	r3, [pc, #420]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a68      	ldr	r2, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b66      	ldr	r3, [pc, #408]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a65      	ldr	r2, [pc, #404]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fd ff44 	bl	800215c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd ff40 	bl	800215c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e207      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b5b      	ldr	r3, [pc, #364]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xc0>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd ff30 	bl	800215c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd ff2c 	bl	800215c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1f3      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0xe8>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d063      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1c7      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4937      	ldr	r1, [pc, #220]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e03a      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_OscConfig+0x244>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd fee5 	bl	800215c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004396:	f7fd fee1 	bl	800215c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1a8      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4925      	ldr	r1, [pc, #148]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x244>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fec4 	bl	800215c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fd fec0 	bl	800215c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e187      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d036      	beq.n	8004470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fd fea4 	bl	800215c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004418:	f7fd fea0 	bl	800215c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e167      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x240>)
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x200>
 8004436:	e01b      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_OscConfig+0x248>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443e:	f7fd fe8d 	bl	800215c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	e00e      	b.n	8004464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004446:	f7fd fe89 	bl	800215c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d907      	bls.n	8004464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e150      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004458:	40023800 	.word	0x40023800
 800445c:	42470000 	.word	0x42470000
 8004460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	4b88      	ldr	r3, [pc, #544]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ea      	bne.n	8004446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8097 	beq.w	80045ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10f      	bne.n	80044ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	4b7d      	ldr	r3, [pc, #500]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a7c      	ldr	r2, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	4b77      	ldr	r3, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d118      	bne.n	80044ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ba:	4b74      	ldr	r3, [pc, #464]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a73      	ldr	r2, [pc, #460]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c6:	f7fd fe49 	bl	800215c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ce:	f7fd fe45 	bl	800215c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e10c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x474>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x2ea>
 80044f4:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	e01c      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b05      	cmp	r3, #5
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x30c>
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5e      	ldr	r2, [pc, #376]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	4b5c      	ldr	r3, [pc, #368]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0x324>
 8004524:	4b58      	ldr	r3, [pc, #352]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a57      	ldr	r2, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	4b55      	ldr	r3, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a54      	ldr	r2, [pc, #336]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 0304 	bic.w	r3, r3, #4
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd fe0a 	bl	800215c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fd fe06 	bl	800215c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0cb      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	4b49      	ldr	r3, [pc, #292]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <HAL_RCC_OscConfig+0x334>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fd fdf4 	bl	800215c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd fdf0 	bl	800215c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0b5      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ee      	bne.n	8004578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a38      	ldr	r2, [pc, #224]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a1 	beq.w	80046f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d05c      	beq.n	800467c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d141      	bne.n	800464e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd fdc4 	bl	800215c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fdc0 	bl	800215c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e087      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	491b      	ldr	r1, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fd fd99 	bl	800215c <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462e:	f7fd fd95 	bl	800215c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e05c      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004640:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x416>
 800464c:	e054      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <HAL_RCC_OscConfig+0x478>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fd fd82 	bl	800215c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fd fd7e 	bl	800215c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e045      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x470>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x444>
 800467a:	e03d      	b.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e038      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
 8004688:	40023800 	.word	0x40023800
 800468c:	40007000 	.word	0x40007000
 8004690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4ec>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d028      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d121      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d11a      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0cc      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90c      	bls.n	8004744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0b8      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800475c:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004774:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a52      	ldr	r2, [pc, #328]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	494d      	ldr	r1, [pc, #308]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d044      	beq.n	8004828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d119      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e067      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4934      	ldr	r1, [pc, #208]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fd fcb0 	bl	800215c <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fd fcac 	bl	800215c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e04f      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20c      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e032      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4916      	ldr	r1, [pc, #88]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488e:	f000 f821 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fd fc10 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	0800a07c 	.word	0x0800a07c
 80048cc:	20000000 	.word	0x20000000
 80048d0:	20000004 	.word	0x20000004

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b094      	sub	sp, #80	; 0x50
 80048da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	2300      	movs	r3, #0
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	2300      	movs	r3, #0
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ec:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x40>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	f200 80e1 	bhi.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x34>
 8004902:	2b04      	cmp	r3, #4
 8004904:	d003      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x3a>
 8004906:	e0db      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800490c:	e0db      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCC_GetSysClockFreq+0x208>)
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004912:	e0d8      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491e:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d063      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	2200      	movs	r2, #0
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 8004934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	0159      	lsls	r1, r3, #5
 8004954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004958:	0150      	lsls	r0, r2, #5
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4621      	mov	r1, r4
 8004960:	1a51      	subs	r1, r2, r1
 8004962:	6139      	str	r1, [r7, #16]
 8004964:	4629      	mov	r1, r5
 8004966:	eb63 0301 	sbc.w	r3, r3, r1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004978:	4659      	mov	r1, fp
 800497a:	018b      	lsls	r3, r1, #6
 800497c:	4651      	mov	r1, sl
 800497e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004982:	4651      	mov	r1, sl
 8004984:	018a      	lsls	r2, r1, #6
 8004986:	4651      	mov	r1, sl
 8004988:	ebb2 0801 	subs.w	r8, r2, r1
 800498c:	4659      	mov	r1, fp
 800498e:	eb63 0901 	sbc.w	r9, r3, r1
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a6:	4690      	mov	r8, r2
 80049a8:	4699      	mov	r9, r3
 80049aa:	4623      	mov	r3, r4
 80049ac:	eb18 0303 	adds.w	r3, r8, r3
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	462b      	mov	r3, r5
 80049b4:	eb49 0303 	adc.w	r3, r9, r3
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049c6:	4629      	mov	r1, r5
 80049c8:	024b      	lsls	r3, r1, #9
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049d0:	4621      	mov	r1, r4
 80049d2:	024a      	lsls	r2, r1, #9
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	2200      	movs	r2, #0
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e4:	f7fb ffde 	bl	80009a4 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	e058      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	2200      	movs	r2, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	4611      	mov	r1, r2
 80049fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	f04f 0000 	mov.w	r0, #0
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	0159      	lsls	r1, r3, #5
 8004a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1e:	0150      	lsls	r0, r2, #5
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4641      	mov	r1, r8
 8004a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a44:	ebb2 040a 	subs.w	r4, r2, sl
 8004a48:	eb63 050b 	sbc.w	r5, r3, fp
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb45 0303 	adc.w	r3, r5, r3
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	028b      	lsls	r3, r1, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a84:	4621      	mov	r1, r4
 8004a86:	028a      	lsls	r2, r1, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	61fa      	str	r2, [r7, #28]
 8004a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a98:	f7fb ff84 	bl	80009a4 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3750      	adds	r7, #80	; 0x50
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000000 	.word	0x20000000

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004afc:	f7ff fff0 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0a9b      	lsrs	r3, r3, #10
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	0800a08c 	.word	0x0800a08c

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b24:	f7ff ffdc 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0b5b      	lsrs	r3, r3, #13
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	0800a08c 	.word	0x0800a08c

08004b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07b      	b.n	8004c52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6a:	d009      	beq.n	8004b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	61da      	str	r2, [r3, #28]
 8004b72:	e005      	b.n	8004b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd f81c 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	ea42 0103 	orr.w	r1, r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 0104 	and.w	r1, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0210 	and.w	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e041      	b.n	8004cf0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fd f841 	bl	8001d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 fd3f 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d109      	bne.n	8004d1c <HAL_TIM_PWM_Start+0x24>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e022      	b.n	8004d62 <HAL_TIM_PWM_Start+0x6a>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d109      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x3e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e015      	b.n	8004d62 <HAL_TIM_PWM_Start+0x6a>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d109      	bne.n	8004d50 <HAL_TIM_PWM_Start+0x58>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e008      	b.n	8004d62 <HAL_TIM_PWM_Start+0x6a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07c      	b.n	8004e64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x82>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_PWM_Start+0xaa>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x92>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xaa>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xa2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_PWM_Start+0xaa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2201      	movs	r2, #1
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 f830 	bl	8005e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_TIM_PWM_Start+0x174>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0xcc>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_TIM_PWM_Start+0x178>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0xd0>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_TIM_PWM_Start+0xd2>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <HAL_TIM_PWM_Start+0x174>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <HAL_TIM_PWM_Start+0x17c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_TIM_PWM_Start+0x180>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <HAL_TIM_PWM_Start+0x184>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_TIM_PWM_Start+0x178>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <HAL_TIM_PWM_Start+0x188>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x136>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <HAL_TIM_PWM_Start+0x18c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d010      	beq.n	8004e62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	e007      	b.n	8004e62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40000800 	.word	0x40000800
 8004e7c:	40000c00 	.word	0x40000c00
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40001800 	.word	0x40001800

08004e88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e041      	b.n	8004f1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc feda 	bl	8001c68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fc28 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_IC_Start_IT+0x1e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e013      	b.n	8004f6e <HAL_TIM_IC_Start_IT+0x46>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_IC_Start_IT+0x2e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e00b      	b.n	8004f6e <HAL_TIM_IC_Start_IT+0x46>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_IC_Start_IT+0x3e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	e003      	b.n	8004f6e <HAL_TIM_IC_Start_IT+0x46>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <HAL_TIM_IC_Start_IT+0x58>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	e013      	b.n	8004fa8 <HAL_TIM_IC_Start_IT+0x80>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d104      	bne.n	8004f90 <HAL_TIM_IC_Start_IT+0x68>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e00b      	b.n	8004fa8 <HAL_TIM_IC_Start_IT+0x80>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d104      	bne.n	8004fa0 <HAL_TIM_IC_Start_IT+0x78>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e003      	b.n	8004fa8 <HAL_TIM_IC_Start_IT+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d102      	bne.n	8004fb6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fb0:	7b7b      	ldrb	r3, [r7, #13]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d001      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0cc      	b.n	8005154 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_IC_Start_IT+0xa2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc8:	e013      	b.n	8004ff2 <HAL_TIM_IC_Start_IT+0xca>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_IC_Start_IT+0xb2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	e00b      	b.n	8004ff2 <HAL_TIM_IC_Start_IT+0xca>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_IC_Start_IT+0xc2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe8:	e003      	b.n	8004ff2 <HAL_TIM_IC_Start_IT+0xca>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0xda>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005000:	e013      	b.n	800502a <HAL_TIM_IC_Start_IT+0x102>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d104      	bne.n	8005012 <HAL_TIM_IC_Start_IT+0xea>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005010:	e00b      	b.n	800502a <HAL_TIM_IC_Start_IT+0x102>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d104      	bne.n	8005022 <HAL_TIM_IC_Start_IT+0xfa>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	e003      	b.n	800502a <HAL_TIM_IC_Start_IT+0x102>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d841      	bhi.n	80050b4 <HAL_TIM_IC_Start_IT+0x18c>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_TIM_IC_Start_IT+0x110>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800506d 	.word	0x0800506d
 800503c:	080050b5 	.word	0x080050b5
 8005040:	080050b5 	.word	0x080050b5
 8005044:	080050b5 	.word	0x080050b5
 8005048:	0800507f 	.word	0x0800507f
 800504c:	080050b5 	.word	0x080050b5
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080050b5 	.word	0x080050b5
 8005058:	08005091 	.word	0x08005091
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050b5 	.word	0x080050b5
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050a3 	.word	0x080050a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0202 	orr.w	r2, r2, #2
 800507a:	60da      	str	r2, [r3, #12]
      break;
 800507c:	e01d      	b.n	80050ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0204 	orr.w	r2, r2, #4
 800508c:	60da      	str	r2, [r3, #12]
      break;
 800508e:	e014      	b.n	80050ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	60da      	str	r2, [r3, #12]
      break;
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0210 	orr.w	r2, r2, #16
 80050b0:	60da      	str	r2, [r3, #12]
      break;
 80050b2:	e002      	b.n	80050ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d148      	bne.n	8005152 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fea1 	bl	8005e10 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_TIM_IC_Start_IT+0x234>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d01d      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_TIM_IC_Start_IT+0x238>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_TIM_IC_Start_IT+0x23c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_TIM_IC_Start_IT+0x240>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <HAL_TIM_IC_Start_IT+0x244>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_TIM_IC_Start_IT+0x248>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_TIM_IC_Start_IT+0x1f6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <HAL_TIM_IC_Start_IT+0x24c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d111      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b06      	cmp	r3, #6
 800512e:	d010      	beq.n	8005152 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005140:	e007      	b.n	8005152 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40010000 	.word	0x40010000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40010400 	.word	0x40010400
 8005170:	40014000 	.word	0x40014000
 8005174:	40001800 	.word	0x40001800

08005178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0202 	mvn.w	r2, #2
 80051a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb fd90 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fa8c 	bl	80056e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa93 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0204 	mvn.w	r2, #4
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fb fd66 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa62 	bl	80056e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa69 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b08      	cmp	r3, #8
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0208 	mvn.w	r2, #8
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fb fd3c 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa38 	bl	80056e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa3f 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b10      	cmp	r3, #16
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2208      	movs	r2, #8
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fb fd12 	bl	8000ce0 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa0e 	bl	80056e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa15 	bl	80056f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0201 	mvn.w	r2, #1
 80052f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9e8 	bl	80056cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d107      	bne.n	8005328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fe20 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9da 	bl	8005708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0220 	mvn.w	r2, #32
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fdea 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e088      	b.n	80054b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f000 fbfa 	bl	8005bbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020c 	bic.w	r2, r2, #12
 80053d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
 80053ea:	e060      	b.n	80054ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d11c      	bne.n	800542c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f000 fc4f 	bl	8005ca4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005414:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6999      	ldr	r1, [r3, #24]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	021a      	lsls	r2, r3, #8
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	619a      	str	r2, [r3, #24]
 800542a:	e040      	b.n	80054ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b08      	cmp	r3, #8
 8005430:	d11b      	bne.n	800546a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f000 fc6c 	bl	8005d1e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 020c 	bic.w	r2, r2, #12
 8005454:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69d9      	ldr	r1, [r3, #28]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	61da      	str	r2, [r3, #28]
 8005468:	e021      	b.n	80054ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d11c      	bne.n	80054aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f000 fc89 	bl	8005d96 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005492:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69d9      	ldr	r1, [r3, #28]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	61da      	str	r2, [r3, #28]
 80054a8:	e001      	b.n	80054ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054da:	2302      	movs	r3, #2
 80054dc:	e0ae      	b.n	800563c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	f200 809f 	bhi.w	800562c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005529 	.word	0x08005529
 80054f8:	0800562d 	.word	0x0800562d
 80054fc:	0800562d 	.word	0x0800562d
 8005500:	0800562d 	.word	0x0800562d
 8005504:	08005569 	.word	0x08005569
 8005508:	0800562d 	.word	0x0800562d
 800550c:	0800562d 	.word	0x0800562d
 8005510:	0800562d 	.word	0x0800562d
 8005514:	080055ab 	.word	0x080055ab
 8005518:	0800562d 	.word	0x0800562d
 800551c:	0800562d 	.word	0x0800562d
 8005520:	0800562d 	.word	0x0800562d
 8005524:	080055eb 	.word	0x080055eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f994 	bl	800585c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0204 	bic.w	r2, r2, #4
 8005552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
      break;
 8005566:	e064      	b.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f9e4 	bl	800593c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6999      	ldr	r1, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	619a      	str	r2, [r3, #24]
      break;
 80055a8:	e043      	b.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fa39 	bl	8005a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0208 	orr.w	r2, r2, #8
 80055c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0204 	bic.w	r2, r2, #4
 80055d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69d9      	ldr	r1, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	61da      	str	r2, [r3, #28]
      break;
 80055e8:	e023      	b.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fa8d 	bl	8005b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69d9      	ldr	r1, [r3, #28]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	61da      	str	r2, [r3, #28]
      break;
 800562a:	e002      	b.n	8005632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
      break;
 8005630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b0c      	cmp	r3, #12
 8005656:	d831      	bhi.n	80056bc <HAL_TIM_ReadCapturedValue+0x78>
 8005658:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <HAL_TIM_ReadCapturedValue+0x1c>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005695 	.word	0x08005695
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056bd 	.word	0x080056bd
 800566c:	080056bd 	.word	0x080056bd
 8005670:	0800569f 	.word	0x0800569f
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056bd 	.word	0x080056bd
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056bd 	.word	0x080056bd
 8005690:	080056b3 	.word	0x080056b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	60fb      	str	r3, [r7, #12]

      break;
 800569c:	e00f      	b.n	80056be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	60fb      	str	r3, [r7, #12]

      break;
 80056a6:	e00a      	b.n	80056be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	60fb      	str	r3, [r7, #12]

      break;
 80056b0:	e005      	b.n	80056be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	60fb      	str	r3, [r7, #12]

      break;
 80056ba:	e000      	b.n	80056be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80056bc:	bf00      	nop
  }

  return tmpreg;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3c      	ldr	r2, [pc, #240]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3b      	ldr	r2, [pc, #236]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d027      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d023      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_Base_SetConfig+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d017      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <TIM_Base_SetConfig+0x128>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a26      	ldr	r2, [pc, #152]	; (800584c <TIM_Base_SetConfig+0x130>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <TIM_Base_SetConfig+0x134>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a24      	ldr	r2, [pc, #144]	; (8005854 <TIM_Base_SetConfig+0x138>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800
 8005850:	40001800 	.word	0x40001800
 8005854:	40001c00 	.word	0x40001c00
 8005858:	40002000 	.word	0x40002000

0800585c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a20      	ldr	r2, [pc, #128]	; (8005934 <TIM_OC1_SetConfig+0xd8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC1_SetConfig+0x64>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0308 	bic.w	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <TIM_OC1_SetConfig+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC1_SetConfig+0x8e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0320 	bic.w	r3, r3, #32
 8005986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <TIM_OC2_SetConfig+0xe4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC2_SetConfig+0x68>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <TIM_OC2_SetConfig+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10d      	bne.n	80059c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <TIM_OC2_SetConfig+0xe4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC2_SetConfig+0x94>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC2_SetConfig+0xe8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d113      	bne.n	80059f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <TIM_OC3_SetConfig+0xe0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC3_SetConfig+0x66>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10d      	bne.n	8005aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <TIM_OC3_SetConfig+0xe0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC3_SetConfig+0x92>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <TIM_OC4_SetConfig+0xa4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC4_SetConfig+0x68>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a11      	ldr	r2, [pc, #68]	; (8005bb8 <TIM_OC4_SetConfig+0xa8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40010400 	.word	0x40010400

08005bbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a28      	ldr	r2, [pc, #160]	; (8005c88 <TIM_TI1_SetConfig+0xcc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01b      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d017      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a25      	ldr	r2, [pc, #148]	; (8005c8c <TIM_TI1_SetConfig+0xd0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <TIM_TI1_SetConfig+0xd4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00f      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <TIM_TI1_SetConfig+0xd8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00b      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a22      	ldr	r2, [pc, #136]	; (8005c98 <TIM_TI1_SetConfig+0xdc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a21      	ldr	r2, [pc, #132]	; (8005c9c <TIM_TI1_SetConfig+0xe0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a20      	ldr	r2, [pc, #128]	; (8005ca0 <TIM_TI1_SetConfig+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <TIM_TI1_SetConfig+0x6a>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <TIM_TI1_SetConfig+0x6c>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e003      	b.n	8005c46 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f023 030a 	bic.w	r3, r3, #10
 8005c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 030a 	and.w	r3, r3, #10
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	031b      	lsls	r3, r3, #12
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b087      	sub	sp, #28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	621a      	str	r2, [r3, #32]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2201      	movs	r2, #1
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1a      	ldr	r2, [r3, #32]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e05a      	b.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d01d      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10c      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e03f      	b.n	800600e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb ff46 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9cb 	bl	800635c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b08a      	sub	sp, #40	; 0x28
 800601a:	af02      	add	r7, sp, #8
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d17c      	bne.n	8006130 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_UART_Transmit+0x2c>
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e075      	b.n	8006132 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UART_Transmit+0x3e>
 8006050:	2302      	movs	r3, #2
 8006052:	e06e      	b.n	8006132 <HAL_UART_Transmit+0x11c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2221      	movs	r2, #33	; 0x21
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800606a:	f7fc f877 	bl	800215c <HAL_GetTick>
 800606e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d108      	bne.n	8006098 <HAL_UART_Transmit+0x82>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e003      	b.n	80060a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060a8:	e02a      	b.n	8006100 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f8e2 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e036      	b.n	8006132 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10b      	bne.n	80060e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	3302      	adds	r3, #2
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e007      	b.n	80060f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	3301      	adds	r3, #1
 80060f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1cf      	bne.n	80060aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2140      	movs	r1, #64	; 0x40
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f8b2 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08a      	sub	sp, #40	; 0x28
 800613e:	af02      	add	r7, sp, #8
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b20      	cmp	r3, #32
 8006158:	f040 808c 	bne.w	8006274 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Receive+0x2e>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e084      	b.n	8006276 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UART_Receive+0x40>
 8006176:	2302      	movs	r3, #2
 8006178:	e07d      	b.n	8006276 <HAL_UART_Receive+0x13c>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2222      	movs	r2, #34	; 0x22
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006196:	f7fb ffe1 	bl	800215c <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d108      	bne.n	80061c4 <HAL_UART_Receive+0x8a>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061d4:	e043      	b.n	800625e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2120      	movs	r1, #32
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f84c 	bl	800627e <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e042      	b.n	8006276 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10c      	bne.n	8006210 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	b29a      	uxth	r2, r3
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	3302      	adds	r3, #2
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e01f      	b.n	8006250 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d007      	beq.n	800622a <HAL_UART_Receive+0xf0>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_UART_Receive+0xfe>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b2da      	uxtb	r2, r3
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	e008      	b.n	800624a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006244:	b2da      	uxtb	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3301      	adds	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1b6      	bne.n	80061d6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b090      	sub	sp, #64	; 0x40
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	e050      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d04c      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0x30>
 800629e:	f7fb ff5d 	bl	800215c <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d241      	bcs.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ce:	637a      	str	r2, [r7, #52]	; 0x34
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3314      	adds	r3, #20
 80062e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	613b      	str	r3, [r7, #16]
   return(result);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006302:	623a      	str	r2, [r7, #32]
 8006304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	6a3a      	ldr	r2, [r7, #32]
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e5      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e00f      	b.n	8006352 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	bf0c      	ite	eq
 8006342:	2301      	moveq	r3, #1
 8006344:	2300      	movne	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	429a      	cmp	r2, r3
 800634e:	d09f      	beq.n	8006290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3740      	adds	r7, #64	; 0x40
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800635c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006360:	b0c0      	sub	sp, #256	; 0x100
 8006362:	af00      	add	r7, sp, #0
 8006364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	68d9      	ldr	r1, [r3, #12]
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	ea40 0301 	orr.w	r3, r0, r1
 8006384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	431a      	orrs	r2, r3
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	431a      	orrs	r2, r3
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063b4:	f021 010c 	bic.w	r1, r1, #12
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063c2:	430b      	orrs	r3, r1
 80063c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	6999      	ldr	r1, [r3, #24]
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	ea40 0301 	orr.w	r3, r0, r1
 80063e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b8f      	ldr	r3, [pc, #572]	; (8006628 <UART_SetConfig+0x2cc>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d005      	beq.n	80063fc <UART_SetConfig+0xa0>
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b8d      	ldr	r3, [pc, #564]	; (800662c <UART_SetConfig+0x2d0>)
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d104      	bne.n	8006406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063fc:	f7fe fb90 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 8006400:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006404:	e003      	b.n	800640e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006406:	f7fe fb77 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 800640a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006418:	f040 810c 	bne.w	8006634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800641c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006420:	2200      	movs	r2, #0
 8006422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800642a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	1891      	adds	r1, r2, r2
 8006434:	65b9      	str	r1, [r7, #88]	; 0x58
 8006436:	415b      	adcs	r3, r3
 8006438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800643a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643e:	4621      	mov	r1, r4
 8006440:	eb12 0801 	adds.w	r8, r2, r1
 8006444:	4629      	mov	r1, r5
 8006446:	eb43 0901 	adc.w	r9, r3, r1
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800645a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645e:	4690      	mov	r8, r2
 8006460:	4699      	mov	r9, r3
 8006462:	4623      	mov	r3, r4
 8006464:	eb18 0303 	adds.w	r3, r8, r3
 8006468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800646c:	462b      	mov	r3, r5
 800646e:	eb49 0303 	adc.w	r3, r9, r3
 8006472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800648a:	460b      	mov	r3, r1
 800648c:	18db      	adds	r3, r3, r3
 800648e:	653b      	str	r3, [r7, #80]	; 0x50
 8006490:	4613      	mov	r3, r2
 8006492:	eb42 0303 	adc.w	r3, r2, r3
 8006496:	657b      	str	r3, [r7, #84]	; 0x54
 8006498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800649c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064a0:	f7fa fa80 	bl	80009a4 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4b61      	ldr	r3, [pc, #388]	; (8006630 <UART_SetConfig+0x2d4>)
 80064aa:	fba3 2302 	umull	r2, r3, r3, r2
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	011c      	lsls	r4, r3, #4
 80064b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064c4:	4642      	mov	r2, r8
 80064c6:	464b      	mov	r3, r9
 80064c8:	1891      	adds	r1, r2, r2
 80064ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80064cc:	415b      	adcs	r3, r3
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064d4:	4641      	mov	r1, r8
 80064d6:	eb12 0a01 	adds.w	sl, r2, r1
 80064da:	4649      	mov	r1, r9
 80064dc:	eb43 0b01 	adc.w	fp, r3, r1
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f4:	4692      	mov	sl, r2
 80064f6:	469b      	mov	fp, r3
 80064f8:	4643      	mov	r3, r8
 80064fa:	eb1a 0303 	adds.w	r3, sl, r3
 80064fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006502:	464b      	mov	r3, r9
 8006504:	eb4b 0303 	adc.w	r3, fp, r3
 8006508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006518:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800651c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006520:	460b      	mov	r3, r1
 8006522:	18db      	adds	r3, r3, r3
 8006524:	643b      	str	r3, [r7, #64]	; 0x40
 8006526:	4613      	mov	r3, r2
 8006528:	eb42 0303 	adc.w	r3, r2, r3
 800652c:	647b      	str	r3, [r7, #68]	; 0x44
 800652e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006536:	f7fa fa35 	bl	80009a4 <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4611      	mov	r1, r2
 8006540:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <UART_SetConfig+0x2d4>)
 8006542:	fba3 2301 	umull	r2, r3, r3, r1
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2264      	movs	r2, #100	; 0x64
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	1acb      	subs	r3, r1, r3
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006556:	4b36      	ldr	r3, [pc, #216]	; (8006630 <UART_SetConfig+0x2d4>)
 8006558:	fba3 2302 	umull	r2, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006564:	441c      	add	r4, r3
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006570:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	1891      	adds	r1, r2, r2
 800657e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006580:	415b      	adcs	r3, r3
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006588:	4641      	mov	r1, r8
 800658a:	1851      	adds	r1, r2, r1
 800658c:	6339      	str	r1, [r7, #48]	; 0x30
 800658e:	4649      	mov	r1, r9
 8006590:	414b      	adcs	r3, r1
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065a0:	4659      	mov	r1, fp
 80065a2:	00cb      	lsls	r3, r1, #3
 80065a4:	4651      	mov	r1, sl
 80065a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065aa:	4651      	mov	r1, sl
 80065ac:	00ca      	lsls	r2, r1, #3
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	4642      	mov	r2, r8
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065bc:	464b      	mov	r3, r9
 80065be:	460a      	mov	r2, r1
 80065c0:	eb42 0303 	adc.w	r3, r2, r3
 80065c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065dc:	460b      	mov	r3, r1
 80065de:	18db      	adds	r3, r3, r3
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e2:	4613      	mov	r3, r2
 80065e4:	eb42 0303 	adc.w	r3, r2, r3
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065f2:	f7fa f9d7 	bl	80009a4 <__aeabi_uldivmod>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <UART_SetConfig+0x2d4>)
 80065fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	2164      	movs	r1, #100	; 0x64
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	3332      	adds	r3, #50	; 0x32
 800660e:	4a08      	ldr	r2, [pc, #32]	; (8006630 <UART_SetConfig+0x2d4>)
 8006610:	fba2 2303 	umull	r2, r3, r2, r3
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	f003 0207 	and.w	r2, r3, #7
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4422      	add	r2, r4
 8006622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006624:	e105      	b.n	8006832 <UART_SetConfig+0x4d6>
 8006626:	bf00      	nop
 8006628:	40011000 	.word	0x40011000
 800662c:	40011400 	.word	0x40011400
 8006630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006638:	2200      	movs	r2, #0
 800663a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800663e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006646:	4642      	mov	r2, r8
 8006648:	464b      	mov	r3, r9
 800664a:	1891      	adds	r1, r2, r2
 800664c:	6239      	str	r1, [r7, #32]
 800664e:	415b      	adcs	r3, r3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
 8006652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006656:	4641      	mov	r1, r8
 8006658:	1854      	adds	r4, r2, r1
 800665a:	4649      	mov	r1, r9
 800665c:	eb43 0501 	adc.w	r5, r3, r1
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	00eb      	lsls	r3, r5, #3
 800666a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666e:	00e2      	lsls	r2, r4, #3
 8006670:	4614      	mov	r4, r2
 8006672:	461d      	mov	r5, r3
 8006674:	4643      	mov	r3, r8
 8006676:	18e3      	adds	r3, r4, r3
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800667c:	464b      	mov	r3, r9
 800667e:	eb45 0303 	adc.w	r3, r5, r3
 8006682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066a2:	4629      	mov	r1, r5
 80066a4:	008b      	lsls	r3, r1, #2
 80066a6:	4621      	mov	r1, r4
 80066a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ac:	4621      	mov	r1, r4
 80066ae:	008a      	lsls	r2, r1, #2
 80066b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b4:	f7fa f976 	bl	80009a4 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4b60      	ldr	r3, [pc, #384]	; (8006840 <UART_SetConfig+0x4e4>)
 80066be:	fba3 2302 	umull	r2, r3, r3, r2
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	011c      	lsls	r4, r3, #4
 80066c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	1891      	adds	r1, r2, r2
 80066de:	61b9      	str	r1, [r7, #24]
 80066e0:	415b      	adcs	r3, r3
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e8:	4641      	mov	r1, r8
 80066ea:	1851      	adds	r1, r2, r1
 80066ec:	6139      	str	r1, [r7, #16]
 80066ee:	4649      	mov	r1, r9
 80066f0:	414b      	adcs	r3, r1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006700:	4659      	mov	r1, fp
 8006702:	00cb      	lsls	r3, r1, #3
 8006704:	4651      	mov	r1, sl
 8006706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800670a:	4651      	mov	r1, sl
 800670c:	00ca      	lsls	r2, r1, #3
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	4603      	mov	r3, r0
 8006714:	4642      	mov	r2, r8
 8006716:	189b      	adds	r3, r3, r2
 8006718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800671c:	464b      	mov	r3, r9
 800671e:	460a      	mov	r2, r1
 8006720:	eb42 0303 	adc.w	r3, r2, r3
 8006724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	67bb      	str	r3, [r7, #120]	; 0x78
 8006732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006740:	4649      	mov	r1, r9
 8006742:	008b      	lsls	r3, r1, #2
 8006744:	4641      	mov	r1, r8
 8006746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674a:	4641      	mov	r1, r8
 800674c:	008a      	lsls	r2, r1, #2
 800674e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006752:	f7fa f927 	bl	80009a4 <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4b39      	ldr	r3, [pc, #228]	; (8006840 <UART_SetConfig+0x4e4>)
 800675c:	fba3 1302 	umull	r1, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2164      	movs	r1, #100	; 0x64
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	3332      	adds	r3, #50	; 0x32
 800676e:	4a34      	ldr	r2, [pc, #208]	; (8006840 <UART_SetConfig+0x4e4>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677a:	441c      	add	r4, r3
 800677c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006780:	2200      	movs	r2, #0
 8006782:	673b      	str	r3, [r7, #112]	; 0x70
 8006784:	677a      	str	r2, [r7, #116]	; 0x74
 8006786:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	1891      	adds	r1, r2, r2
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	415b      	adcs	r3, r3
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800679a:	4641      	mov	r1, r8
 800679c:	1851      	adds	r1, r2, r1
 800679e:	6039      	str	r1, [r7, #0]
 80067a0:	4649      	mov	r1, r9
 80067a2:	414b      	adcs	r3, r1
 80067a4:	607b      	str	r3, [r7, #4]
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067b2:	4659      	mov	r1, fp
 80067b4:	00cb      	lsls	r3, r1, #3
 80067b6:	4651      	mov	r1, sl
 80067b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067bc:	4651      	mov	r1, sl
 80067be:	00ca      	lsls	r2, r1, #3
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	4642      	mov	r2, r8
 80067c8:	189b      	adds	r3, r3, r2
 80067ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80067cc:	464b      	mov	r3, r9
 80067ce:	460a      	mov	r2, r1
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	663b      	str	r3, [r7, #96]	; 0x60
 80067e0:	667a      	str	r2, [r7, #100]	; 0x64
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067ee:	4649      	mov	r1, r9
 80067f0:	008b      	lsls	r3, r1, #2
 80067f2:	4641      	mov	r1, r8
 80067f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f8:	4641      	mov	r1, r8
 80067fa:	008a      	lsls	r2, r1, #2
 80067fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006800:	f7fa f8d0 	bl	80009a4 <__aeabi_uldivmod>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <UART_SetConfig+0x4e4>)
 800680a:	fba3 1302 	umull	r1, r3, r3, r2
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2164      	movs	r1, #100	; 0x64
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	3332      	adds	r3, #50	; 0x32
 800681c:	4a08      	ldr	r2, [pc, #32]	; (8006840 <UART_SetConfig+0x4e4>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4422      	add	r2, r4
 8006830:	609a      	str	r2, [r3, #8]
}
 8006832:	bf00      	nop
 8006834:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006838:	46bd      	mov	sp, r7
 800683a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683e:	bf00      	nop
 8006840:	51eb851f 	.word	0x51eb851f

08006844 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006844:	b084      	sub	sp, #16
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	f107 001c 	add.w	r0, r7, #28
 8006852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	d122      	bne.n	80068a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f9c0 	bl	8006c1c <USB_CoreReset>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e01a      	b.n	80068d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9b4 	bl	8006c1c <USB_CoreReset>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
 80068ca:	e005      	b.n	80068d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10b      	bne.n	80068f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f043 0206 	orr.w	r2, r3, #6
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006902:	b004      	add	sp, #16
 8006904:	4770      	bx	lr

08006906 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f023 0201 	bic.w	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d115      	bne.n	8006998 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006978:	2001      	movs	r0, #1
 800697a:	f7fb fbfb 	bl	8002174 <HAL_Delay>
      ms++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f93a 	bl	8006bfe <USB_GetMode>
 800698a:	4603      	mov	r3, r0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d01e      	beq.n	80069ce <USB_SetCurrentMode+0x84>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b31      	cmp	r3, #49	; 0x31
 8006994:	d9f0      	bls.n	8006978 <USB_SetCurrentMode+0x2e>
 8006996:	e01a      	b.n	80069ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d115      	bne.n	80069ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069aa:	2001      	movs	r0, #1
 80069ac:	f7fb fbe2 	bl	8002174 <HAL_Delay>
      ms++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f921 	bl	8006bfe <USB_GetMode>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <USB_SetCurrentMode+0x84>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b31      	cmp	r3, #49	; 0x31
 80069c6:	d9f0      	bls.n	80069aa <USB_SetCurrentMode+0x60>
 80069c8:	e001      	b.n	80069ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e005      	b.n	80069da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b32      	cmp	r3, #50	; 0x32
 80069d2:	d101      	bne.n	80069d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a13      	ldr	r2, [pc, #76]	; (8006a48 <USB_FlushTxFifo+0x64>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e01b      	b.n	8006a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	daf2      	bge.n	80069f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	019b      	lsls	r3, r3, #6
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <USB_FlushTxFifo+0x64>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e006      	b.n	8006a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d0f0      	beq.n	8006a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <USB_FlushRxFifo+0x5c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e018      	b.n	8006a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	daf2      	bge.n	8006a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2210      	movs	r2, #16
 8006a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <USB_FlushRxFifo+0x5c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e006      	b.n	8006a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d0f0      	beq.n	8006a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	00030d40 	.word	0x00030d40

08006aac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	; 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	460b      	mov	r3, r1
 8006abc:	71fb      	strb	r3, [r7, #7]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d123      	bne.n	8006b1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ad2:	88bb      	ldrh	r3, [r7, #4]
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	e018      	b.n	8006b12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	031a      	lsls	r2, r3, #12
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aec:	461a      	mov	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3301      	adds	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	3301      	adds	r3, #1
 8006b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d3e2      	bcc.n	8006ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3724      	adds	r7, #36	; 0x24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b08b      	sub	sp, #44	; 0x2c
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	623b      	str	r3, [r7, #32]
 8006b52:	e014      	b.n	8006b7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	3301      	adds	r3, #1
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	3301      	adds	r3, #1
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	3301      	adds	r3, #1
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	3301      	adds	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3e6      	bcc.n	8006b54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b86:	8bfb      	ldrh	r3, [r7, #30]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01e      	beq.n	8006bca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b96:	461a      	mov	r2, r3
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	701a      	strb	r2, [r3, #0]
      i++;
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	3301      	adds	r3, #1
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bbe:	8bfb      	ldrh	r3, [r7, #30]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bc4:	8bfb      	ldrh	r3, [r7, #30]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1ea      	bne.n	8006ba0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	372c      	adds	r7, #44	; 0x2c
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4013      	ands	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <USB_CoreReset+0x64>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e01b      	b.n	8006c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	daf2      	bge.n	8006c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <USB_CoreReset+0x64>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e006      	b.n	8006c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d0f0      	beq.n	8006c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	00030d40 	.word	0x00030d40

08006c84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c84:	b084      	sub	sp, #16
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d018      	beq.n	8006d0c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10a      	bne.n	8006cf6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	e014      	b.n	8006d20 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	e009      	b.n	8006d20 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d1a:	f023 0304 	bic.w	r3, r3, #4
 8006d1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d20:	2110      	movs	r1, #16
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fe5e 	bl	80069e4 <USB_FlushTxFifo>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fe8a 	bl	8006a4c <USB_FlushRxFifo>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e015      	b.n	8006d74 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	461a      	mov	r2, r3
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d3e5      	bcc.n	8006d48 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <USB_HostInit+0x16c>)
 8006da2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a13      	ldr	r2, [pc, #76]	; (8006df4 <USB_HostInit+0x170>)
 8006da8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006dac:	e009      	b.n	8006dc2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2280      	movs	r2, #128	; 0x80
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a10      	ldr	r2, [pc, #64]	; (8006df8 <USB_HostInit+0x174>)
 8006db8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a0f      	ldr	r2, [pc, #60]	; (8006dfc <USB_HostInit+0x178>)
 8006dbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f043 0210 	orr.w	r2, r3, #16
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <USB_HostInit+0x17c>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dec:	b004      	add	sp, #16
 8006dee:	4770      	bx	lr
 8006df0:	01000200 	.word	0x01000200
 8006df4:	00e00300 	.word	0x00e00300
 8006df8:	00600080 	.word	0x00600080
 8006dfc:	004000e0 	.word	0x004000e0
 8006e00:	a3200008 	.word	0xa3200008

08006e04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d107      	bne.n	8006e56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e52:	6053      	str	r3, [r2, #4]
 8006e54:	e009      	b.n	8006e6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d106      	bne.n	8006e6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e62:	461a      	mov	r2, r3
 8006e64:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ea8:	2064      	movs	r0, #100	; 0x64
 8006eaa:	f7fb f963 	bl	8002174 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ebc:	200a      	movs	r0, #10
 8006ebe:	f7fb f959 	bl	8002174 <HAL_Delay>

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ef0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <USB_DriveVbus+0x44>
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d106      	bne.n	8006f10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d109      	bne.n	8006f30 <USB_DriveVbus+0x64>
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	0c5b      	lsrs	r3, r3, #17
 8006f5c:	f003 0303 	and.w	r3, r3, #3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	b29b      	uxth	r3, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	70fb      	strb	r3, [r7, #3]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70bb      	strb	r3, [r7, #2]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d87e      	bhi.n	80070cc <USB_HC_Init+0x13c>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USB_HC_Init+0x44>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	0800708f 	.word	0x0800708f
 8006fdc:	08006fe5 	.word	0x08006fe5
 8006fe0:	08007051 	.word	0x08007051
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006ff6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ff8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da10      	bge.n	8007022 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	440a      	add	r2, r1
 8007016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800701a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007020:	e057      	b.n	80070d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d051      	beq.n	80070d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	440a      	add	r2, r1
 8007044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800704c:	60d3      	str	r3, [r2, #12]
      break;
 800704e:	e040      	b.n	80070d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	461a      	mov	r2, r3
 800705e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007062:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007064:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007068:	2b00      	cmp	r3, #0
 800706a:	da34      	bge.n	80070d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	440a      	add	r2, r1
 8007082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800708c:	e023      	b.n	80070d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709a:	461a      	mov	r2, r3
 800709c:	f240 2325 	movw	r3, #549	; 0x225
 80070a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da17      	bge.n	80070da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80070c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070ca:	e006      	b.n	80070da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	77fb      	strb	r3, [r7, #31]
      break;
 80070d0:	e004      	b.n	80070dc <USB_HC_Init+0x14c>
      break;
 80070d2:	bf00      	nop
 80070d4:	e002      	b.n	80070dc <USB_HC_Init+0x14c>
      break;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <USB_HC_Init+0x14c>
      break;
 80070da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	6939      	ldr	r1, [r7, #16]
 8007112:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007116:	4313      	orrs	r3, r2
 8007118:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007126:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800712a:	2b00      	cmp	r3, #0
 800712c:	da03      	bge.n	8007136 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800712e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	e001      	b.n	800713a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff feff 	bl	8006f3e <USB_GetHostSpeed>
 8007140:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007146:	2b02      	cmp	r3, #2
 8007148:	d106      	bne.n	8007158 <USB_HC_Init+0x1c8>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d003      	beq.n	8007158 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e001      	b.n	800715c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800715c:	787b      	ldrb	r3, [r7, #1]
 800715e:	059b      	lsls	r3, r3, #22
 8007160:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007164:	78bb      	ldrb	r3, [r7, #2]
 8007166:	02db      	lsls	r3, r3, #11
 8007168:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800716c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800716e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007172:	049b      	lsls	r3, r3, #18
 8007174:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007178:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800717a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800717c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007180:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	0159      	lsls	r1, r3, #5
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	440b      	add	r3, r1
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007198:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800719a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d003      	beq.n	80071aa <USB_HC_Init+0x21a>
 80071a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10f      	bne.n	80071ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80071ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80071ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d02d      	beq.n	800725a <USB_HC_StartXfer+0x86>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d129      	bne.n	800725a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d117      	bne.n	800723c <USB_HC_StartXfer+0x68>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	79db      	ldrb	r3, [r3, #7]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <USB_HC_StartXfer+0x48>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	79db      	ldrb	r3, [r3, #7]
 8007218:	2b02      	cmp	r3, #2
 800721a:	d10f      	bne.n	800723c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	6a3a      	ldr	r2, [r7, #32]
 8007230:	440a      	add	r2, r1
 8007232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <USB_HC_StartXfer+0x86>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	795b      	ldrb	r3, [r3, #5]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d107      	bne.n	800725a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fa0f 	bl	8007674 <USB_DoPing>
      return HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	e0f8      	b.n	800744c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d018      	beq.n	8007294 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	8912      	ldrh	r2, [r2, #8]
 800726a:	4413      	add	r3, r2
 800726c:	3b01      	subs	r3, #1
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	8912      	ldrh	r2, [r2, #8]
 8007272:	fbb3 f3f2 	udiv	r3, r3, r2
 8007276:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800727a:	8b7b      	ldrh	r3, [r7, #26]
 800727c:	429a      	cmp	r2, r3
 800727e:	d90b      	bls.n	8007298 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007280:	8b7b      	ldrh	r3, [r7, #26]
 8007282:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	8912      	ldrh	r2, [r2, #8]
 800728a:	fb03 f202 	mul.w	r2, r3, r2
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	611a      	str	r2, [r3, #16]
 8007292:	e001      	b.n	8007298 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007294:	2301      	movs	r3, #1
 8007296:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	78db      	ldrb	r3, [r3, #3]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d007      	beq.n	80072b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	8912      	ldrh	r2, [r2, #8]
 80072a6:	fb03 f202 	mul.w	r2, r3, r2
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	611a      	str	r2, [r3, #16]
 80072ae:	e003      	b.n	80072b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072c2:	04d9      	lsls	r1, r3, #19
 80072c4:	4b63      	ldr	r3, [pc, #396]	; (8007454 <USB_HC_StartXfer+0x280>)
 80072c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	7a9b      	ldrb	r3, [r3, #10]
 80072ce:	075b      	lsls	r3, r3, #29
 80072d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	0148      	lsls	r0, r1, #5
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	4401      	add	r1, r0
 80072dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	68d9      	ldr	r1, [r3, #12]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	460a      	mov	r2, r1
 80072fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	440a      	add	r2, r1
 800732c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007334:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	7e7b      	ldrb	r3, [r7, #25]
 8007346:	075b      	lsls	r3, r3, #29
 8007348:	69f9      	ldr	r1, [r7, #28]
 800734a:	0148      	lsls	r0, r1, #5
 800734c:	6a39      	ldr	r1, [r7, #32]
 800734e:	4401      	add	r1, r0
 8007350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007354:	4313      	orrs	r3, r2
 8007356:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800736e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	78db      	ldrb	r3, [r3, #3]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e003      	b.n	800738a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007388:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007390:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	461a      	mov	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e04e      	b.n	800744c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	78db      	ldrb	r3, [r3, #3]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d149      	bne.n	800744a <USB_HC_StartXfer+0x276>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d045      	beq.n	800744a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	79db      	ldrb	r3, [r3, #7]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d830      	bhi.n	8007428 <USB_HC_StartXfer+0x254>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <USB_HC_StartXfer+0x1f8>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073dd 	.word	0x080073dd
 80073d0:	08007401 	.word	0x08007401
 80073d4:	080073dd 	.word	0x080073dd
 80073d8:	08007401 	.word	0x08007401
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	3303      	adds	r3, #3
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073e6:	8afa      	ldrh	r2, [r7, #22]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d91c      	bls.n	800742c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80073fe:	e015      	b.n	800742c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	3303      	adds	r3, #3
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800740a:	8afa      	ldrh	r2, [r7, #22]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	b29b      	uxth	r3, r3
 8007416:	429a      	cmp	r2, r3
 8007418:	d90a      	bls.n	8007430 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	619a      	str	r2, [r3, #24]
        }
        break;
 8007426:	e003      	b.n	8007430 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <USB_HC_StartXfer+0x25e>
        break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <USB_HC_StartXfer+0x25e>
        break;
 8007430:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	68d9      	ldr	r1, [r3, #12]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	785a      	ldrb	r2, [r3, #1]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	b29b      	uxth	r3, r3
 8007440:	2000      	movs	r0, #0
 8007442:	9000      	str	r0, [sp, #0]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fb31 	bl	8006aac <USB_WritePacket>
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3728      	adds	r7, #40	; 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	1ff80000 	.word	0x1ff80000

08007458 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	b29b      	uxth	r3, r3
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800747a:	b480      	push	{r7}
 800747c:	b089      	sub	sp, #36	; 0x24
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	0c9b      	lsrs	r3, r3, #18
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	0fdb      	lsrs	r3, r3, #31
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d104      	bne.n	80074d4 <USB_HC_Halt+0x5a>
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e0c8      	b.n	8007666 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <USB_HC_Halt+0x66>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d163      	bne.n	80075a8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 80ab 	bne.w	8007664 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d133      	bne.n	8007582 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007538:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	440a      	add	r2, r1
 8007550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007558:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007566:	d81d      	bhi.n	80075a4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800757a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757e:	d0ec      	beq.n	800755a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007580:	e070      	b.n	8007664 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	440a      	add	r2, r1
 8007598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800759c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075a2:	e05f      	b.n	8007664 <USB_HC_Halt+0x1ea>
            break;
 80075a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075a6:	e05d      	b.n	8007664 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d133      	bne.n	8007640 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	440a      	add	r2, r1
 800760e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007616:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007624:	d81d      	bhi.n	8007662 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763c:	d0ec      	beq.n	8007618 <USB_HC_Halt+0x19e>
 800763e:	e011      	b.n	8007664 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4413      	add	r3, r2
 8007648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	440a      	add	r2, r1
 8007656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800765a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	e000      	b.n	8007664 <USB_HC_Halt+0x1ea>
          break;
 8007662:	bf00      	nop
    }
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007688:	2301      	movs	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	04da      	lsls	r2, r3, #19
 8007690:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <USB_DoPing+0x74>)
 8007692:	4013      	ands	r3, r2
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	440a      	add	r2, r1
 800769c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d2:	461a      	mov	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	1ff80000 	.word	0x1ff80000

080076ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff f911 	bl	8006928 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007706:	2110      	movs	r1, #16
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff f96b 	bl	80069e4 <USB_FlushTxFifo>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff f997 	bl	8006a4c <USB_FlushRxFifo>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e01f      	b.n	800776e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007744:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800774c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007754:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	461a      	mov	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	3301      	adds	r3, #1
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d9dc      	bls.n	800772e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e034      	b.n	80077e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007790:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ae:	461a      	mov	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c0:	d80c      	bhi.n	80077dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d8:	d0ec      	beq.n	80077b4 <USB_StopHost+0xc8>
 80077da:	e000      	b.n	80077de <USB_StopHost+0xf2>
        break;
 80077dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	3301      	adds	r3, #1
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d9c7      	bls.n	800777a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077f0:	461a      	mov	r2, r3
 80077f2:	f04f 33ff 	mov.w	r3, #4294967295
 80077f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f04f 32ff 	mov.w	r2, #4294967295
 80077fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff f880 	bl	8006906 <USB_EnableGlobalInt>

  return ret;
 8007806:	7ffb      	ldrb	r3, [r7, #31]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3720      	adds	r7, #32
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b089      	sub	sp, #36	; 0x24
 8007814:	af04      	add	r7, sp, #16
 8007816:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007818:	2301      	movs	r3, #1
 800781a:	2202      	movs	r2, #2
 800781c:	2102      	movs	r1, #2
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc66 	bl	80080f0 <USBH_FindInterface>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2bff      	cmp	r3, #255	; 0xff
 800782c:	d002      	beq.n	8007834 <USBH_CDC_InterfaceInit+0x24>
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d901      	bls.n	8007838 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007834:	2302      	movs	r3, #2
 8007836:	e13d      	b.n	8007ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc3b 	bl	80080b8 <USBH_SelectInterface>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800784c:	2302      	movs	r3, #2
 800784e:	e131      	b.n	8007ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007856:	2050      	movs	r0, #80	; 0x50
 8007858:	f002 faec 	bl	8009e34 <malloc>
 800785c:	4603      	mov	r3, r0
 800785e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	e11f      	b.n	8007ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007874:	2250      	movs	r2, #80	; 0x50
 8007876:	2100      	movs	r1, #0
 8007878:	68b8      	ldr	r0, [r7, #8]
 800787a:	f002 faeb 	bl	8009e54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	211a      	movs	r1, #26
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	4413      	add	r3, r2
 800788a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b25b      	sxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	da15      	bge.n	80078c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	211a      	movs	r1, #26
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	211a      	movs	r1, #26
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 ff2c 	bl	8009726 <USBH_AllocPipe>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	7819      	ldrb	r1, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	7858      	ldrb	r0, [r3, #1]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	8952      	ldrh	r2, [r2, #10]
 80078ee:	9202      	str	r2, [sp, #8]
 80078f0:	2203      	movs	r2, #3
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4623      	mov	r3, r4
 80078f8:	4602      	mov	r2, r0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fee4 	bl	80096c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2200      	movs	r2, #0
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f002 f9e5 	bl	8009cd8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800790e:	2300      	movs	r3, #0
 8007910:	2200      	movs	r2, #0
 8007912:	210a      	movs	r1, #10
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fbeb 	bl	80080f0 <USBH_FindInterface>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2bff      	cmp	r3, #255	; 0xff
 8007922:	d002      	beq.n	800792a <USBH_CDC_InterfaceInit+0x11a>
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d901      	bls.n	800792e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800792a:	2302      	movs	r3, #2
 800792c:	e0c2      	b.n	8007ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	211a      	movs	r1, #26
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	4413      	add	r3, r2
 800793a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b25b      	sxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	da16      	bge.n	8007974 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	211a      	movs	r1, #26
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	211a      	movs	r1, #26
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	835a      	strh	r2, [r3, #26]
 8007972:	e015      	b.n	80079a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	211a      	movs	r1, #26
 800797a:	fb01 f303 	mul.w	r3, r1, r3
 800797e:	4413      	add	r3, r2
 8007980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	211a      	movs	r1, #26
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800799a:	881a      	ldrh	r2, [r3, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	211a      	movs	r1, #26
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da16      	bge.n	80079e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	211a      	movs	r1, #26
 80079be:	fb01 f303 	mul.w	r3, r1, r3
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	211a      	movs	r1, #26
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	4413      	add	r3, r2
 80079da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079de:	881a      	ldrh	r2, [r3, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	835a      	strh	r2, [r3, #26]
 80079e4:	e015      	b.n	8007a12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	211a      	movs	r1, #26
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	211a      	movs	r1, #26
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007a0c:	881a      	ldrh	r2, [r3, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	7b9b      	ldrb	r3, [r3, #14]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fe84 	bl	8009726 <USBH_AllocPipe>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	7bdb      	ldrb	r3, [r3, #15]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fe7a 	bl	8009726 <USBH_AllocPipe>
 8007a32:	4603      	mov	r3, r0
 8007a34:	461a      	mov	r2, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	7b59      	ldrb	r1, [r3, #13]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	7b98      	ldrb	r0, [r3, #14]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	8b12      	ldrh	r2, [r2, #24]
 8007a52:	9202      	str	r2, [sp, #8]
 8007a54:	2202      	movs	r2, #2
 8007a56:	9201      	str	r2, [sp, #4]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fe32 	bl	80096c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	7b19      	ldrb	r1, [r3, #12]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	7bd8      	ldrb	r0, [r3, #15]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	8b52      	ldrh	r2, [r2, #26]
 8007a7c:	9202      	str	r2, [sp, #8]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4623      	mov	r3, r4
 8007a86:	4602      	mov	r2, r0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fe1d 	bl	80096c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	7b5b      	ldrb	r3, [r3, #13]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f002 f91a 	bl	8009cd8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	7b1b      	ldrb	r3, [r3, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f002 f913 	bl	8009cd8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd90      	pop	{r4, r7, pc}

08007abc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fe12 	bl	8009706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fe3d 	bl	8009768 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	7b1b      	ldrb	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	7b1b      	ldrb	r3, [r3, #12]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fdff 	bl	8009706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	7b1b      	ldrb	r3, [r3, #12]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fe2a 	bl	8009768 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	7b5b      	ldrb	r3, [r3, #13]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	7b5b      	ldrb	r3, [r3, #13]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fdec 	bl	8009706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	7b5b      	ldrb	r3, [r3, #13]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fe17 	bl	8009768 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 f975 	bl	8009e44 <free>
    phost->pActiveClass->pData = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b60:	2200      	movs	r2, #0
 8007b62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3340      	adds	r3, #64	; 0x40
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8b1 	bl	8007cee <GetLineCoding>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d877      	bhi.n	8007cc0 <USBH_CDC_Process+0x114>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBH_CDC_Process+0x2c>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bed 	.word	0x08007bed
 8007bdc:	08007bf3 	.word	0x08007bf3
 8007be0:	08007c23 	.word	0x08007c23
 8007be4:	08007c97 	.word	0x08007c97
 8007be8:	08007ca5 	.word	0x08007ca5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e06d      	b.n	8007cce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f897 	bl	8007d2c <SetLineCoding>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c10:	e058      	b.n	8007cc4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d055      	beq.n	8007cc4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c20:	e050      	b.n	8007cc4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	3340      	adds	r3, #64	; 0x40
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f860 	bl	8007cee <GetLineCoding>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d126      	bne.n	8007c86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	791b      	ldrb	r3, [r3, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d13b      	bne.n	8007cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d133      	bne.n	8007cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d12b      	bne.n	8007cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d124      	bne.n	8007cc8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f958 	bl	8007f34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c84:	e020      	b.n	8007cc8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d01d      	beq.n	8007cc8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2204      	movs	r2, #4
 8007c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c94:	e018      	b.n	8007cc8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f867 	bl	8007d6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8da 	bl	8007e56 <CDC_ProcessReception>
      break;
 8007ca2:	e014      	b.n	8007cce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 ffef 	bl	8008c8a <USBH_ClrFeature>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10a      	bne.n	8007ccc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007cbe:	e005      	b.n	8007ccc <USBH_CDC_Process+0x120>

    default:
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e004      	b.n	8007cce <USBH_CDC_Process+0x122>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <USBH_CDC_Process+0x122>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <USBH_CDC_Process+0x122>
      break;
 8007ccc:	bf00      	nop

  }

  return status;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	22a1      	movs	r2, #161	; 0xa1
 8007cfc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2221      	movs	r2, #33	; 0x21
 8007d02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2207      	movs	r2, #7
 8007d14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2207      	movs	r2, #7
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fa81 	bl	8009224 <USBH_CtlReq>
 8007d22:	4603      	mov	r3, r0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2221      	movs	r2, #33	; 0x21
 8007d3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2207      	movs	r2, #7
 8007d52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2207      	movs	r2, #7
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fa62 	bl	8009224 <USBH_CtlReq>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af02      	add	r7, sp, #8
 8007d70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d002      	beq.n	8007d90 <CDC_ProcessTransmission+0x26>
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d023      	beq.n	8007dd6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d8e:	e05e      	b.n	8007e4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	8b12      	ldrh	r2, [r2, #24]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d90b      	bls.n	8007db4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	69d9      	ldr	r1, [r3, #28]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8b1a      	ldrh	r2, [r3, #24]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	7b5b      	ldrb	r3, [r3, #13]
 8007da8:	2001      	movs	r0, #1
 8007daa:	9000      	str	r0, [sp, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fc48 	bl	8009642 <USBH_BulkSendData>
 8007db2:	e00b      	b.n	8007dcc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	7b5b      	ldrb	r3, [r3, #13]
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	9000      	str	r0, [sp, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fc3b 	bl	8009642 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007dd4:	e03b      	b.n	8007e4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	7b5b      	ldrb	r3, [r3, #13]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 ff51 	bl	8009c84 <USBH_LL_GetURBState>
 8007de2:	4603      	mov	r3, r0
 8007de4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d128      	bne.n	8007e3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	8b12      	ldrh	r2, [r2, #24]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d90e      	bls.n	8007e16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	8b12      	ldrh	r2, [r2, #24]
 8007e00:	1a9a      	subs	r2, r3, r2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	8b12      	ldrh	r2, [r2, #24]
 8007e0e:	441a      	add	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	61da      	str	r2, [r3, #28]
 8007e14:	e002      	b.n	8007e1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e2c:	e00e      	b.n	8007e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f868 	bl	8007f0c <USBH_CDC_TransmitCallback>
      break;
 8007e3c:	e006      	b.n	8007e4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d103      	bne.n	8007e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d002      	beq.n	8007e7c <CDC_ProcessReception+0x26>
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d00e      	beq.n	8007e98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e7a:	e043      	b.n	8007f04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	6a19      	ldr	r1, [r3, #32]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	8b5a      	ldrh	r2, [r3, #26]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	7b1b      	ldrb	r3, [r3, #12]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fbff 	bl	800968c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2204      	movs	r2, #4
 8007e92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e96:	e035      	b.n	8007f04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	7b1b      	ldrb	r3, [r3, #12]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fef0 	bl	8009c84 <USBH_LL_GetURBState>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ea8:	7cfb      	ldrb	r3, [r7, #19]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d129      	bne.n	8007f02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	7b1b      	ldrb	r3, [r3, #12]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fe53 	bl	8009b60 <USBH_LL_GetLastXferSize>
 8007eba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d016      	beq.n	8007ef4 <CDC_ProcessReception+0x9e>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	8b5b      	ldrh	r3, [r3, #26]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d910      	bls.n	8007ef4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	1ad2      	subs	r2, r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	6a1a      	ldr	r2, [r3, #32]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2203      	movs	r2, #3
 8007eee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ef2:	e006      	b.n	8007f02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f80f 	bl	8007f20 <USBH_CDC_ReceiveCallback>
      break;
 8007f02:	bf00      	nop
  }
}
 8007f04:	bf00      	nop
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e029      	b.n	8007fb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	79fa      	ldrb	r2, [r7, #7]
 8007f64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f81f 	bl	8007fbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f001 fd23 	bl	80099f8 <USBH_LL_Init>

  return USBH_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	e009      	b.n	8007fe2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	33e0      	adds	r3, #224	; 0xe0
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b0f      	cmp	r3, #15
 8007fe6:	d9f2      	bls.n	8007fce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e009      	b.n	8008002 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d3f1      	bcc.n	8007fee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2240      	movs	r2, #64	; 0x40
 800802e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d016      	beq.n	80080a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10e      	bne.n	80080a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008088:	1c59      	adds	r1, r3, #1
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	33de      	adds	r3, #222	; 0xde
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	e004      	b.n	80080aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	73fb      	strb	r3, [r7, #15]
 80080a4:	e001      	b.n	80080aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d204      	bcs.n	80080de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80080dc:	e001      	b.n	80080e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80080de:	2302      	movs	r3, #2
 80080e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	4603      	mov	r3, r0
 8008100:	70fb      	strb	r3, [r7, #3]
 8008102:	460b      	mov	r3, r1
 8008104:	70bb      	strb	r3, [r7, #2]
 8008106:	4613      	mov	r3, r2
 8008108:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008118:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800811a:	e025      	b.n	8008168 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	221a      	movs	r2, #26
 8008120:	fb02 f303 	mul.w	r3, r2, r3
 8008124:	3308      	adds	r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	3302      	adds	r3, #2
 800812c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	795b      	ldrb	r3, [r3, #5]
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	429a      	cmp	r2, r3
 8008136:	d002      	beq.n	800813e <USBH_FindInterface+0x4e>
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2bff      	cmp	r3, #255	; 0xff
 800813c:	d111      	bne.n	8008162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008142:	78ba      	ldrb	r2, [r7, #2]
 8008144:	429a      	cmp	r2, r3
 8008146:	d002      	beq.n	800814e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008148:	78bb      	ldrb	r3, [r7, #2]
 800814a:	2bff      	cmp	r3, #255	; 0xff
 800814c:	d109      	bne.n	8008162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008152:	787a      	ldrb	r2, [r7, #1]
 8008154:	429a      	cmp	r2, r3
 8008156:	d002      	beq.n	800815e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008158:	787b      	ldrb	r3, [r7, #1]
 800815a:	2bff      	cmp	r3, #255	; 0xff
 800815c:	d101      	bne.n	8008162 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	e006      	b.n	8008170 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	3301      	adds	r3, #1
 8008166:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d9d6      	bls.n	800811c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800816e:	23ff      	movs	r3, #255	; 0xff
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fc73 	bl	8009a70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800818a:	2101      	movs	r1, #1
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fd8c 	bl	8009caa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af04      	add	r7, sp, #16
 80081a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081a4:	2302      	movs	r3, #2
 80081a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d102      	bne.n	80081be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b0b      	cmp	r3, #11
 80081c6:	f200 81be 	bhi.w	8008546 <USBH_Process+0x3aa>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBH_Process+0x34>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	08008201 	.word	0x08008201
 80081d4:	08008233 	.word	0x08008233
 80081d8:	0800829b 	.word	0x0800829b
 80081dc:	080084e1 	.word	0x080084e1
 80081e0:	08008547 	.word	0x08008547
 80081e4:	0800833f 	.word	0x0800833f
 80081e8:	08008487 	.word	0x08008487
 80081ec:	08008375 	.word	0x08008375
 80081f0:	08008395 	.word	0x08008395
 80081f4:	080083b5 	.word	0x080083b5
 80081f8:	080083f9 	.word	0x080083f9
 80081fc:	080084c9 	.word	0x080084c9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 819e 	beq.w	800854a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008214:	20c8      	movs	r0, #200	; 0xc8
 8008216:	f001 fd8f 	bl	8009d38 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fc85 	bl	8009b2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008230:	e18b      	b.n	800854a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008238:	2b01      	cmp	r3, #1
 800823a:	d107      	bne.n	800824c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800824a:	e18d      	b.n	8008568 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008256:	d914      	bls.n	8008282 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800825e:	3301      	adds	r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800826e:	2b03      	cmp	r3, #3
 8008270:	d903      	bls.n	800827a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	220d      	movs	r2, #13
 8008276:	701a      	strb	r2, [r3, #0]
      break;
 8008278:	e176      	b.n	8008568 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
      break;
 8008280:	e172      	b.n	8008568 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008288:	f103 020a 	add.w	r2, r3, #10
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008292:	200a      	movs	r0, #10
 8008294:	f001 fd50 	bl	8009d38 <USBH_Delay>
      break;
 8008298:	e166      	b.n	8008568 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082aa:	2104      	movs	r1, #4
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80082b0:	2064      	movs	r0, #100	; 0x64
 80082b2:	f001 fd41 	bl	8009d38 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fc10 	bl	8009adc <USBH_LL_GetSpeed>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2205      	movs	r2, #5
 80082ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fa29 	bl	8009726 <USBH_AllocPipe>
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80082dc:	2180      	movs	r1, #128	; 0x80
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fa21 	bl	8009726 <USBH_AllocPipe>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7919      	ldrb	r1, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008300:	b292      	uxth	r2, r2
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4603      	mov	r3, r0
 800830c:	2280      	movs	r2, #128	; 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f9da 	bl	80096c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7959      	ldrb	r1, [r3, #5]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008328:	b292      	uxth	r2, r2
 800832a:	9202      	str	r2, [sp, #8]
 800832c:	2200      	movs	r2, #0
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4603      	mov	r3, r0
 8008334:	2200      	movs	r2, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f9c6 	bl	80096c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800833c:	e114      	b.n	8008568 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f918 	bl	8008574 <USBH_HandleEnum>
 8008344:	4603      	mov	r3, r0
 8008346:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 80fe 	bne.w	800854e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008360:	2b01      	cmp	r3, #1
 8008362:	d103      	bne.n	800836c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2208      	movs	r2, #8
 8008368:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800836a:	e0f0      	b.n	800854e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2207      	movs	r2, #7
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e0ec      	b.n	800854e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80e9 	beq.w	8008552 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008386:	2101      	movs	r1, #1
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2208      	movs	r2, #8
 8008390:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008392:	e0de      	b.n	8008552 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800839a:	b29b      	uxth	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc2c 	bl	8008bfc <USBH_SetCfg>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80d5 	bne.w	8008556 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2209      	movs	r2, #9
 80083b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083b2:	e0d0      	b.n	8008556 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d016      	beq.n	80083f0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80083c2:	2101      	movs	r1, #1
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fc3c 	bl	8008c42 <USBH_SetFeature>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	220a      	movs	r2, #10
 80083da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083dc:	e0bd      	b.n	800855a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	f040 80b9 	bne.w	800855a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220a      	movs	r2, #10
 80083ec:	701a      	strb	r2, [r3, #0]
      break;
 80083ee:	e0b4      	b.n	800855a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	220a      	movs	r2, #10
 80083f4:	701a      	strb	r2, [r3, #0]
      break;
 80083f6:	e0b0      	b.n	800855a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 80ad 	beq.w	800855e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]
 8008410:	e016      	b.n	8008440 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008412:	7bfa      	ldrb	r2, [r7, #15]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	32de      	adds	r2, #222	; 0xde
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	791a      	ldrb	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008424:	429a      	cmp	r2, r3
 8008426:	d108      	bne.n	800843a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008428:	7bfa      	ldrb	r2, [r7, #15]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32de      	adds	r2, #222	; 0xde
 800842e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008438:	e005      	b.n	8008446 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	3301      	adds	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0e5      	beq.n	8008412 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d016      	beq.n	800847e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2206      	movs	r2, #6
 8008466:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800846e:	2103      	movs	r1, #3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008474:	e073      	b.n	800855e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	220d      	movs	r2, #13
 800847a:	701a      	strb	r2, [r3, #0]
      break;
 800847c:	e06f      	b.n	800855e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	220d      	movs	r2, #13
 8008482:	701a      	strb	r2, [r3, #0]
      break;
 8008484:	e06b      	b.n	800855e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d017      	beq.n	80084c0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d103      	bne.n	80084b0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220b      	movs	r2, #11
 80084ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084ae:	e058      	b.n	8008562 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d154      	bne.n	8008562 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220d      	movs	r2, #13
 80084bc:	701a      	strb	r2, [r3, #0]
      break;
 80084be:	e050      	b.n	8008562 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	220d      	movs	r2, #13
 80084c4:	701a      	strb	r2, [r3, #0]
      break;
 80084c6:	e04c      	b.n	8008562 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d049      	beq.n	8008566 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
      }
      break;
 80084de:	e042      	b.n	8008566 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fd67 	bl	8007fbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800851c:	2105      	movs	r1, #5
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b01      	cmp	r3, #1
 800852c:	d107      	bne.n	800853e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fe20 	bl	800817c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800853c:	e014      	b.n	8008568 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fa96 	bl	8009a70 <USBH_LL_Start>
      break;
 8008544:	e010      	b.n	8008568 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008546:	bf00      	nop
 8008548:	e00e      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 800854a:	bf00      	nop
 800854c:	e00c      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 800854e:	bf00      	nop
 8008550:	e00a      	b.n	8008568 <USBH_Process+0x3cc>
    break;
 8008552:	bf00      	nop
 8008554:	e008      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 8008556:	bf00      	nop
 8008558:	e006      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 800855a:	bf00      	nop
 800855c:	e004      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 800855e:	bf00      	nop
 8008560:	e002      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 8008562:	bf00      	nop
 8008564:	e000      	b.n	8008568 <USBH_Process+0x3cc>
      break;
 8008566:	bf00      	nop
  }
  return USBH_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop

08008574 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af04      	add	r7, sp, #16
 800857a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008580:	2301      	movs	r3, #1
 8008582:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b07      	cmp	r3, #7
 800858a:	f200 81c1 	bhi.w	8008910 <USBH_HandleEnum+0x39c>
 800858e:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <USBH_HandleEnum+0x20>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085b5 	.word	0x080085b5
 8008598:	08008673 	.word	0x08008673
 800859c:	080086dd 	.word	0x080086dd
 80085a0:	0800876b 	.word	0x0800876b
 80085a4:	080087d5 	.word	0x080087d5
 80085a8:	08008845 	.word	0x08008845
 80085ac:	0800888b 	.word	0x0800888b
 80085b0:	080088d1 	.word	0x080088d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80085b4:	2108      	movs	r1, #8
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa50 	bl	8008a5c <USBH_Get_DevDesc>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d130      	bne.n	8008628 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	7919      	ldrb	r1, [r3, #4]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085ea:	b292      	uxth	r2, r2
 80085ec:	9202      	str	r2, [sp, #8]
 80085ee:	2200      	movs	r2, #0
 80085f0:	9201      	str	r2, [sp, #4]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4603      	mov	r3, r0
 80085f6:	2280      	movs	r2, #128	; 0x80
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f865 	bl	80096c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7959      	ldrb	r1, [r3, #5]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008612:	b292      	uxth	r2, r2
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	2200      	movs	r2, #0
 8008618:	9201      	str	r2, [sp, #4]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	2200      	movs	r2, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 f851 	bl	80096c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008626:	e175      	b.n	8008914 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b03      	cmp	r3, #3
 800862c:	f040 8172 	bne.w	8008914 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008636:	3301      	adds	r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008646:	2b03      	cmp	r3, #3
 8008648:	d903      	bls.n	8008652 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	220d      	movs	r2, #13
 800864e:	701a      	strb	r2, [r3, #0]
      break;
 8008650:	e160      	b.n	8008914 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	795b      	ldrb	r3, [r3, #5]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f885 	bl	8009768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 f87f 	bl	8009768 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
      break;
 8008670:	e150      	b.n	8008914 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008672:	2112      	movs	r1, #18
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9f1 	bl	8008a5c <USBH_Get_DevDesc>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d103      	bne.n	800868c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800868a:	e145      	b.n	8008918 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b03      	cmp	r3, #3
 8008690:	f040 8142 	bne.w	8008918 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800869a:	3301      	adds	r3, #1
 800869c:	b2da      	uxtb	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d903      	bls.n	80086b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	220d      	movs	r2, #13
 80086b2:	701a      	strb	r2, [r3, #0]
      break;
 80086b4:	e130      	b.n	8008918 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	795b      	ldrb	r3, [r3, #5]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f853 	bl	8009768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f84d 	bl	8009768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
      break;
 80086da:	e11d      	b.n	8008918 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80086dc:	2101      	movs	r1, #1
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa68 	bl	8008bb4 <USBH_SetAddress>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d132      	bne.n	8008754 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80086ee:	2002      	movs	r0, #2
 80086f0:	f001 fb22 	bl	8009d38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2203      	movs	r2, #3
 8008700:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7919      	ldrb	r1, [r3, #4]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008716:	b292      	uxth	r2, r2
 8008718:	9202      	str	r2, [sp, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	9201      	str	r2, [sp, #4]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4603      	mov	r3, r0
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 ffcf 	bl	80096c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7959      	ldrb	r1, [r3, #5]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800873e:	b292      	uxth	r2, r2
 8008740:	9202      	str	r2, [sp, #8]
 8008742:	2200      	movs	r2, #0
 8008744:	9201      	str	r2, [sp, #4]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4603      	mov	r3, r0
 800874a:	2200      	movs	r2, #0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 ffbb 	bl	80096c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008752:	e0e3      	b.n	800891c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b03      	cmp	r3, #3
 8008758:	f040 80e0 	bne.w	800891c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220d      	movs	r2, #13
 8008760:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	705a      	strb	r2, [r3, #1]
      break;
 8008768:	e0d8      	b.n	800891c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800876a:	2109      	movs	r1, #9
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f99d 	bl	8008aac <USBH_Get_CfgDesc>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d103      	bne.n	8008784 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2204      	movs	r2, #4
 8008780:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008782:	e0cd      	b.n	8008920 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b03      	cmp	r3, #3
 8008788:	f040 80ca 	bne.w	8008920 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008792:	3301      	adds	r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d903      	bls.n	80087ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	220d      	movs	r2, #13
 80087aa:	701a      	strb	r2, [r3, #0]
      break;
 80087ac:	e0b8      	b.n	8008920 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	795b      	ldrb	r3, [r3, #5]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 ffd7 	bl	8009768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 ffd1 	bl	8009768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
      break;
 80087d2:	e0a5      	b.n	8008920 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f965 	bl	8008aac <USBH_Get_CfgDesc>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2205      	movs	r2, #5
 80087f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087f2:	e097      	b.n	8008924 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	f040 8094 	bne.w	8008924 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008802:	3301      	adds	r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008812:	2b03      	cmp	r3, #3
 8008814:	d903      	bls.n	800881e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	220d      	movs	r2, #13
 800881a:	701a      	strb	r2, [r3, #0]
      break;
 800881c:	e082      	b.n	8008924 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	795b      	ldrb	r3, [r3, #5]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 ff9f 	bl	8009768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	791b      	ldrb	r3, [r3, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 ff99 	bl	8009768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
      break;
 8008842:	e06f      	b.n	8008924 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800884a:	2b00      	cmp	r3, #0
 800884c:	d019      	beq.n	8008882 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800885a:	23ff      	movs	r3, #255	; 0xff
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f949 	bl	8008af4 <USBH_Get_StringDesc>
 8008862:	4603      	mov	r3, r0
 8008864:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2206      	movs	r2, #6
 8008870:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008872:	e059      	b.n	8008928 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b03      	cmp	r3, #3
 8008878:	d156      	bne.n	8008928 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2206      	movs	r2, #6
 800887e:	705a      	strb	r2, [r3, #1]
      break;
 8008880:	e052      	b.n	8008928 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2206      	movs	r2, #6
 8008886:	705a      	strb	r2, [r3, #1]
      break;
 8008888:	e04e      	b.n	8008928 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008890:	2b00      	cmp	r3, #0
 8008892:	d019      	beq.n	80088c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088a0:	23ff      	movs	r3, #255	; 0xff
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f926 	bl	8008af4 <USBH_Get_StringDesc>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2207      	movs	r2, #7
 80088b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088b8:	e038      	b.n	800892c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d135      	bne.n	800892c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2207      	movs	r2, #7
 80088c4:	705a      	strb	r2, [r3, #1]
      break;
 80088c6:	e031      	b.n	800892c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2207      	movs	r2, #7
 80088cc:	705a      	strb	r2, [r3, #1]
      break;
 80088ce:	e02d      	b.n	800892c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d017      	beq.n	800890a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088e6:	23ff      	movs	r3, #255	; 0xff
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f903 	bl	8008af4 <USBH_Get_StringDesc>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80088fc:	e018      	b.n	8008930 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d115      	bne.n	8008930 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]
      break;
 8008908:	e012      	b.n	8008930 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
      break;
 800890e:	e00f      	b.n	8008930 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008910:	bf00      	nop
 8008912:	e00e      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008914:	bf00      	nop
 8008916:	e00c      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008918:	bf00      	nop
 800891a:	e00a      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 800891c:	bf00      	nop
 800891e:	e008      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008920:	bf00      	nop
 8008922:	e006      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008924:	bf00      	nop
 8008926:	e004      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008928:	bf00      	nop
 800892a:	e002      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 800892c:	bf00      	nop
 800892e:	e000      	b.n	8008932 <USBH_HandleEnum+0x3be>
      break;
 8008930:	bf00      	nop
  }
  return Status;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f804 	bl	800897e <USBH_HandleSof>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b0b      	cmp	r3, #11
 800898e:	d10a      	bne.n	80089a6 <USBH_HandleSof+0x28>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
  }
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80089be:	bf00      	nop
}
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80089da:	bf00      	nop
}
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f836 	bl	8009aa6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	791b      	ldrb	r3, [r3, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fe91 	bl	8009768 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	795b      	ldrb	r3, [r3, #5]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fe8b 	bl	8009768 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f864 	bl	8008b4a <USBH_GetDescriptor>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f000 f918 	bl	8008cd2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	331c      	adds	r3, #28
 8008abc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008abe:	887b      	ldrh	r3, [r7, #2]
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac8:	2100      	movs	r1, #0
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f83d 	bl	8008b4a <USBH_GetDescriptor>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008ada:	887b      	ldrh	r3, [r7, #2]
 8008adc:	461a      	mov	r2, r3
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f987 	bl	8008df4 <USBH_ParseCfgDesc>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	72fb      	strb	r3, [r7, #11]
 8008b04:	4613      	mov	r3, r2
 8008b06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b10:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f812 	bl	8008b4a <USBH_GetDescriptor>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d107      	bne.n	8008b40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b36:	893a      	ldrh	r2, [r7, #8]
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fb24 	bl	8009188 <USBH_ParseStringDesc>
  }

  return status;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	72fb      	strb	r3, [r7, #11]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	789b      	ldrb	r3, [r3, #2]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d11c      	bne.n	8008b9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2206      	movs	r2, #6
 8008b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	893a      	ldrh	r2, [r7, #8]
 8008b7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b7c:	893b      	ldrh	r3, [r7, #8]
 8008b7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b86:	d104      	bne.n	8008b92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f240 4209 	movw	r2, #1033	; 0x409
 8008b8e:	829a      	strh	r2, [r3, #20]
 8008b90:	e002      	b.n	8008b98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8b3a      	ldrh	r2, [r7, #24]
 8008b9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b9e:	8b3b      	ldrh	r3, [r7, #24]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fb3d 	bl	8009224 <USBH_CtlReq>
 8008baa:	4603      	mov	r3, r0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	789b      	ldrb	r3, [r3, #2]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d10f      	bne.n	8008be8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008be8:	2200      	movs	r2, #0
 8008bea:	2100      	movs	r1, #0
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fb19 	bl	8009224 <USBH_CtlReq>
 8008bf2:	4603      	mov	r3, r0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	789b      	ldrb	r3, [r3, #2]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10e      	bne.n	8008c2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2209      	movs	r2, #9
 8008c1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	887a      	ldrh	r2, [r7, #2]
 8008c20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 faf6 	bl	8009224 <USBH_CtlReq>
 8008c38:	4603      	mov	r3, r0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	789b      	ldrb	r3, [r3, #2]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d10f      	bne.n	8008c76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fad2 	bl	8009224 <USBH_CtlReq>
 8008c80:	4603      	mov	r3, r0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	789b      	ldrb	r3, [r3, #2]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d10f      	bne.n	8008cbe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 faae 	bl	8009224 <USBH_CtlReq>
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	785a      	ldrb	r2, [r3, #1]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	3303      	adds	r3, #3
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4313      	orrs	r3, r2
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	791a      	ldrb	r2, [r3, #4]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	795a      	ldrb	r2, [r3, #5]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	799a      	ldrb	r2, [r3, #6]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	79da      	ldrb	r2, [r3, #7]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	79db      	ldrb	r3, [r3, #7]
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	dc11      	bgt.n	8008d58 <USBH_ParseDevDesc+0x86>
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	db16      	blt.n	8008d66 <USBH_ParseDevDesc+0x94>
 8008d38:	3b08      	subs	r3, #8
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bf14      	ite	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	2300      	moveq	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <USBH_ParseDevDesc+0x8a>
 8008d56:	e006      	b.n	8008d66 <USBH_ParseDevDesc+0x94>
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d104      	bne.n	8008d66 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	79da      	ldrb	r2, [r3, #7]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	71da      	strb	r2, [r3, #7]
      break;
 8008d64:	e003      	b.n	8008d6e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2240      	movs	r2, #64	; 0x40
 8008d6a:	71da      	strb	r2, [r3, #7]
      break;
 8008d6c:	bf00      	nop
  }

  if (length > 8U)
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d939      	bls.n	8008de8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	3308      	adds	r3, #8
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3309      	adds	r3, #9
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	330a      	adds	r3, #10
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	330b      	adds	r3, #11
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	330c      	adds	r3, #12
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	330d      	adds	r3, #13
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	7b9a      	ldrb	r2, [r3, #14]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	7bda      	ldrb	r2, [r3, #15]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	7c1a      	ldrb	r2, [r3, #16]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7c5a      	ldrb	r2, [r3, #17]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	745a      	strb	r2, [r3, #17]
  }
}
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e08:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	785a      	ldrb	r2, [r3, #1]
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	3302      	adds	r3, #2
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	3303      	adds	r3, #3
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e50:	bf28      	it	cs
 8008e52:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	791a      	ldrb	r2, [r3, #4]
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	795a      	ldrb	r2, [r3, #5]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	799a      	ldrb	r2, [r3, #6]
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	79da      	ldrb	r2, [r3, #7]
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	7a1a      	ldrb	r2, [r3, #8]
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d002      	beq.n	8008e92 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	2209      	movs	r2, #9
 8008e90:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e92:	88fb      	ldrh	r3, [r7, #6]
 8008e94:	2b09      	cmp	r3, #9
 8008e96:	f240 809d 	bls.w	8008fd4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e9a:	2309      	movs	r3, #9
 8008e9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ea2:	e081      	b.n	8008fa8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ea4:	f107 0316 	add.w	r3, r7, #22
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eac:	f000 f99f 	bl	80091ee <USBH_GetNextDesc>
 8008eb0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d176      	bne.n	8008fa8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b09      	cmp	r3, #9
 8008ec0:	d002      	beq.n	8008ec8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	2209      	movs	r2, #9
 8008ec6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ecc:	221a      	movs	r2, #26
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6a3a      	ldr	r2, [r7, #32]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	3302      	adds	r3, #2
 8008eda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ede:	69f8      	ldr	r0, [r7, #28]
 8008ee0:	f000 f87e 	bl	8008fe0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008eee:	e043      	b.n	8008f78 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ef0:	f107 0316 	add.w	r3, r7, #22
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef8:	f000 f979 	bl	80091ee <USBH_GetNextDesc>
 8008efc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	d138      	bne.n	8008f78 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	795b      	ldrb	r3, [r3, #5]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10f      	bne.n	8008f2e <USBH_ParseCfgDesc+0x13a>
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	799b      	ldrb	r3, [r3, #6]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d10b      	bne.n	8008f2e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	79db      	ldrb	r3, [r3, #7]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10f      	bne.n	8008f3e <USBH_ParseCfgDesc+0x14a>
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d00b      	beq.n	8008f3e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2209      	movs	r2, #9
 8008f2a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f2c:	e007      	b.n	8008f3e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b07      	cmp	r3, #7
 8008f34:	d004      	beq.n	8008f40 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2207      	movs	r2, #7
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	e000      	b.n	8008f40 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f3e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f48:	3201      	adds	r2, #1
 8008f4a:	00d2      	lsls	r2, r2, #3
 8008f4c:	211a      	movs	r1, #26
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	4413      	add	r3, r2
 8008f54:	3308      	adds	r3, #8
 8008f56:	6a3a      	ldr	r2, [r7, #32]
 8008f58:	4413      	add	r3, r2
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f60:	69b9      	ldr	r1, [r7, #24]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f86b 	bl	800903e <USBH_ParseEPDesc>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f72:	3301      	adds	r3, #1
 8008f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	791b      	ldrb	r3, [r3, #4]
 8008f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d204      	bcs.n	8008f8e <USBH_ParseCfgDesc+0x19a>
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	885a      	ldrh	r2, [r3, #2]
 8008f88:	8afb      	ldrh	r3, [r7, #22]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d8b0      	bhi.n	8008ef0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	791b      	ldrb	r3, [r3, #4]
 8008f92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d201      	bcs.n	8008f9e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e01c      	b.n	8008fd8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d805      	bhi.n	8008fbc <USBH_ParseCfgDesc+0x1c8>
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	885a      	ldrh	r2, [r3, #2]
 8008fb4:	8afb      	ldrh	r3, [r7, #22]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	f63f af74 	bhi.w	8008ea4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	bf28      	it	cs
 8008fc4:	2302      	movcs	r3, #2
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d201      	bcs.n	8008fd4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e001      	b.n	8008fd8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3730      	adds	r7, #48	; 0x30
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	785a      	ldrb	r2, [r3, #1]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	789a      	ldrb	r2, [r3, #2]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	78da      	ldrb	r2, [r3, #3]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	791a      	ldrb	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	795a      	ldrb	r2, [r3, #5]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	799a      	ldrb	r2, [r3, #6]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	79da      	ldrb	r2, [r3, #7]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	7a1a      	ldrb	r2, [r3, #8]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	721a      	strb	r2, [r3, #8]
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800903e:	b480      	push	{r7}
 8009040:	b087      	sub	sp, #28
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	785a      	ldrb	r2, [r3, #1]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	789a      	ldrb	r2, [r3, #2]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	78da      	ldrb	r2, [r3, #3]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3305      	adds	r3, #5
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b29a      	uxth	r2, r3
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	799a      	ldrb	r2, [r3, #6]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	889b      	ldrh	r3, [r3, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800909a:	2303      	movs	r3, #3
 800909c:	75fb      	strb	r3, [r7, #23]
 800909e:	e033      	b.n	8009108 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	889b      	ldrh	r3, [r3, #4]
 80090a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090a8:	f023 0307 	bic.w	r3, r3, #7
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	889b      	ldrh	r3, [r3, #4]
 80090b6:	b21a      	sxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	b299      	uxth	r1, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3305      	adds	r3, #5
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	430b      	orrs	r3, r1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d110      	bne.n	80090fa <USBH_ParseEPDesc+0xbc>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3304      	adds	r3, #4
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b299      	uxth	r1, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3305      	adds	r3, #5
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	430b      	orrs	r3, r1
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	b21b      	sxth	r3, r3
 80090f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090f6:	b21b      	sxth	r3, r3
 80090f8:	e001      	b.n	80090fe <USBH_ParseEPDesc+0xc0>
 80090fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fe:	4313      	orrs	r3, r2
 8009100:	b21b      	sxth	r3, r3
 8009102:	b29a      	uxth	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800910e:	2b00      	cmp	r3, #0
 8009110:	d116      	bne.n	8009140 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b01      	cmp	r3, #1
 800911c:	d005      	beq.n	800912a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	78db      	ldrb	r3, [r3, #3]
 8009122:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009126:	2b03      	cmp	r3, #3
 8009128:	d127      	bne.n	800917a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	799b      	ldrb	r3, [r3, #6]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <USBH_ParseEPDesc+0xfc>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	799b      	ldrb	r3, [r3, #6]
 8009136:	2b10      	cmp	r3, #16
 8009138:	d91f      	bls.n	800917a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800913a:	2303      	movs	r3, #3
 800913c:	75fb      	strb	r3, [r7, #23]
 800913e:	e01c      	b.n	800917a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	78db      	ldrb	r3, [r3, #3]
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d10a      	bne.n	8009162 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	799b      	ldrb	r3, [r3, #6]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <USBH_ParseEPDesc+0x11e>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	799b      	ldrb	r3, [r3, #6]
 8009158:	2b10      	cmp	r3, #16
 800915a:	d90e      	bls.n	800917a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800915c:	2303      	movs	r3, #3
 800915e:	75fb      	strb	r3, [r7, #23]
 8009160:	e00b      	b.n	800917a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	78db      	ldrb	r3, [r3, #3]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b03      	cmp	r3, #3
 800916c:	d105      	bne.n	800917a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	799b      	ldrb	r3, [r3, #6]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009176:	2303      	movs	r3, #3
 8009178:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d120      	bne.n	80091e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	1e9a      	subs	r2, r3, #2
 80091a6:	88fb      	ldrh	r3, [r7, #6]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	bf28      	it	cs
 80091ac:	4613      	movcs	r3, r2
 80091ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3302      	adds	r3, #2
 80091b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80091b6:	2300      	movs	r3, #0
 80091b8:	82fb      	strh	r3, [r7, #22]
 80091ba:	e00b      	b.n	80091d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80091bc:	8afb      	ldrh	r3, [r7, #22]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80091ce:	8afb      	ldrh	r3, [r7, #22]
 80091d0:	3302      	adds	r3, #2
 80091d2:	82fb      	strh	r3, [r7, #22]
 80091d4:	8afa      	ldrh	r2, [r7, #22]
 80091d6:	8abb      	ldrh	r3, [r7, #20]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d3ef      	bcc.n	80091bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
  }
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	881a      	ldrh	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	4413      	add	r3, r2
 8009204:	b29a      	uxth	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009216:	68fb      	ldr	r3, [r7, #12]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009232:	2301      	movs	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d002      	beq.n	8009244 <USBH_CtlReq+0x20>
 800923e:	2b02      	cmp	r3, #2
 8009240:	d00f      	beq.n	8009262 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009242:	e027      	b.n	8009294 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2202      	movs	r2, #2
 800925a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800925c:	2301      	movs	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
      break;
 8009260:	e018      	b.n	8009294 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f81c 	bl	80092a0 <USBH_HandleControl>
 8009268:	4603      	mov	r3, r0
 800926a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <USBH_CtlReq+0x54>
 8009272:	7dfb      	ldrb	r3, [r7, #23]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d106      	bne.n	8009286 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	761a      	strb	r2, [r3, #24]
      break;
 8009284:	e005      	b.n	8009292 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d102      	bne.n	8009292 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	709a      	strb	r2, [r3, #2]
      break;
 8009292:	bf00      	nop
  }
  return status;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7e1b      	ldrb	r3, [r3, #24]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	2b0a      	cmp	r3, #10
 80092b8:	f200 8156 	bhi.w	8009568 <USBH_HandleControl+0x2c8>
 80092bc:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <USBH_HandleControl+0x24>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	080092f1 	.word	0x080092f1
 80092c8:	0800930b 	.word	0x0800930b
 80092cc:	08009375 	.word	0x08009375
 80092d0:	0800939b 	.word	0x0800939b
 80092d4:	080093d3 	.word	0x080093d3
 80092d8:	080093fd 	.word	0x080093fd
 80092dc:	0800944f 	.word	0x0800944f
 80092e0:	08009471 	.word	0x08009471
 80092e4:	080094ad 	.word	0x080094ad
 80092e8:	080094d3 	.word	0x080094d3
 80092ec:	08009511 	.word	0x08009511
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f103 0110 	add.w	r1, r3, #16
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	795b      	ldrb	r3, [r3, #5]
 80092fa:	461a      	mov	r2, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f943 	bl	8009588 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	761a      	strb	r2, [r3, #24]
      break;
 8009308:	e139      	b.n	800957e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	795b      	ldrb	r3, [r3, #5]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fcb7 	bl	8009c84 <USBH_LL_GetURBState>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d11e      	bne.n	800935e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7c1b      	ldrb	r3, [r3, #16]
 8009324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009328:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8adb      	ldrh	r3, [r3, #22]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009332:	7b7b      	ldrb	r3, [r7, #13]
 8009334:	2b80      	cmp	r3, #128	; 0x80
 8009336:	d103      	bne.n	8009340 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2203      	movs	r2, #3
 800933c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800933e:	e115      	b.n	800956c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2205      	movs	r2, #5
 8009344:	761a      	strb	r2, [r3, #24]
      break;
 8009346:	e111      	b.n	800956c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009348:	7b7b      	ldrb	r3, [r7, #13]
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d103      	bne.n	8009356 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2209      	movs	r2, #9
 8009352:	761a      	strb	r2, [r3, #24]
      break;
 8009354:	e10a      	b.n	800956c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2207      	movs	r2, #7
 800935a:	761a      	strb	r2, [r3, #24]
      break;
 800935c:	e106      	b.n	800956c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b04      	cmp	r3, #4
 8009362:	d003      	beq.n	800936c <USBH_HandleControl+0xcc>
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	2b02      	cmp	r3, #2
 8009368:	f040 8100 	bne.w	800956c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	220b      	movs	r2, #11
 8009370:	761a      	strb	r2, [r3, #24]
      break;
 8009372:	e0fb      	b.n	800956c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6899      	ldr	r1, [r3, #8]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	899a      	ldrh	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	791b      	ldrb	r3, [r3, #4]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f93a 	bl	8009606 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2204      	movs	r2, #4
 8009396:	761a      	strb	r2, [r3, #24]
      break;
 8009398:	e0f1      	b.n	800957e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	791b      	ldrb	r3, [r3, #4]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fc6f 	bl	8009c84 <USBH_LL_GetURBState>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d102      	bne.n	80093b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2209      	movs	r2, #9
 80093b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d102      	bne.n	80093c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80093bc:	2303      	movs	r3, #3
 80093be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093c0:	e0d6      	b.n	8009570 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	f040 80d3 	bne.w	8009570 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	220b      	movs	r2, #11
 80093ce:	761a      	strb	r2, [r3, #24]
      break;
 80093d0:	e0ce      	b.n	8009570 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6899      	ldr	r1, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	899a      	ldrh	r2, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	795b      	ldrb	r3, [r3, #5]
 80093de:	2001      	movs	r0, #1
 80093e0:	9000      	str	r0, [sp, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8ea 	bl	80095bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2206      	movs	r2, #6
 80093f8:	761a      	strb	r2, [r3, #24]
      break;
 80093fa:	e0c0      	b.n	800957e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	795b      	ldrb	r3, [r3, #5]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fc3e 	bl	8009c84 <USBH_LL_GetURBState>
 8009408:	4603      	mov	r3, r0
 800940a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d103      	bne.n	800941a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2207      	movs	r2, #7
 8009416:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009418:	e0ac      	b.n	8009574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	2b05      	cmp	r3, #5
 800941e:	d105      	bne.n	800942c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	220c      	movs	r2, #12
 8009424:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009426:	2303      	movs	r3, #3
 8009428:	73fb      	strb	r3, [r7, #15]
      break;
 800942a:	e0a3      	b.n	8009574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d103      	bne.n	800943a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2205      	movs	r2, #5
 8009436:	761a      	strb	r2, [r3, #24]
      break;
 8009438:	e09c      	b.n	8009574 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b04      	cmp	r3, #4
 800943e:	f040 8099 	bne.w	8009574 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	220b      	movs	r2, #11
 8009446:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009448:	2302      	movs	r3, #2
 800944a:	73fb      	strb	r3, [r7, #15]
      break;
 800944c:	e092      	b.n	8009574 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	791b      	ldrb	r3, [r3, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	2100      	movs	r1, #0
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f8d5 	bl	8009606 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009462:	b29a      	uxth	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2208      	movs	r2, #8
 800946c:	761a      	strb	r2, [r3, #24]

      break;
 800946e:	e086      	b.n	800957e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	791b      	ldrb	r3, [r3, #4]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc04 	bl	8009c84 <USBH_LL_GetURBState>
 800947c:	4603      	mov	r3, r0
 800947e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d105      	bne.n	8009492 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	220d      	movs	r2, #13
 800948a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009490:	e072      	b.n	8009578 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b04      	cmp	r3, #4
 8009496:	d103      	bne.n	80094a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	220b      	movs	r2, #11
 800949c:	761a      	strb	r2, [r3, #24]
      break;
 800949e:	e06b      	b.n	8009578 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	d168      	bne.n	8009578 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80094a6:	2303      	movs	r3, #3
 80094a8:	73fb      	strb	r3, [r7, #15]
      break;
 80094aa:	e065      	b.n	8009578 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	795b      	ldrb	r3, [r3, #5]
 80094b0:	2201      	movs	r2, #1
 80094b2:	9200      	str	r2, [sp, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f87f 	bl	80095bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	220a      	movs	r2, #10
 80094ce:	761a      	strb	r2, [r3, #24]
      break;
 80094d0:	e055      	b.n	800957e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	795b      	ldrb	r3, [r3, #5]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fbd3 	bl	8009c84 <USBH_LL_GetURBState>
 80094de:	4603      	mov	r3, r0
 80094e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d105      	bne.n	80094f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	220d      	movs	r2, #13
 80094f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094f2:	e043      	b.n	800957c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d103      	bne.n	8009502 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2209      	movs	r2, #9
 80094fe:	761a      	strb	r2, [r3, #24]
      break;
 8009500:	e03c      	b.n	800957c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b04      	cmp	r3, #4
 8009506:	d139      	bne.n	800957c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	220b      	movs	r2, #11
 800950c:	761a      	strb	r2, [r3, #24]
      break;
 800950e:	e035      	b.n	800957c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7e5b      	ldrb	r3, [r3, #25]
 8009514:	3301      	adds	r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	765a      	strb	r2, [r3, #25]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7e5b      	ldrb	r3, [r3, #25]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d806      	bhi.n	8009532 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009530:	e025      	b.n	800957e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009538:	2106      	movs	r1, #6
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	795b      	ldrb	r3, [r3, #5]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f90c 	bl	8009768 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	791b      	ldrb	r3, [r3, #4]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f906 	bl	8009768 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009562:	2302      	movs	r3, #2
 8009564:	73fb      	strb	r3, [r7, #15]
      break;
 8009566:	e00a      	b.n	800957e <USBH_HandleControl+0x2de>

    default:
      break;
 8009568:	bf00      	nop
 800956a:	e008      	b.n	800957e <USBH_HandleControl+0x2de>
      break;
 800956c:	bf00      	nop
 800956e:	e006      	b.n	800957e <USBH_HandleControl+0x2de>
      break;
 8009570:	bf00      	nop
 8009572:	e004      	b.n	800957e <USBH_HandleControl+0x2de>
      break;
 8009574:	bf00      	nop
 8009576:	e002      	b.n	800957e <USBH_HandleControl+0x2de>
      break;
 8009578:	bf00      	nop
 800957a:	e000      	b.n	800957e <USBH_HandleControl+0x2de>
      break;
 800957c:	bf00      	nop
  }

  return status;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b088      	sub	sp, #32
 800958c:	af04      	add	r7, sp, #16
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009596:	79f9      	ldrb	r1, [r7, #7]
 8009598:	2300      	movs	r3, #0
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	2308      	movs	r3, #8
 800959e:	9302      	str	r3, [sp, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	2300      	movs	r3, #0
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 fb38 	bl	8009c22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4611      	mov	r1, r2
 80095c8:	461a      	mov	r2, r3
 80095ca:	460b      	mov	r3, r1
 80095cc:	80fb      	strh	r3, [r7, #6]
 80095ce:	4613      	mov	r3, r2
 80095d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095e0:	7979      	ldrb	r1, [r7, #5]
 80095e2:	7e3b      	ldrb	r3, [r7, #24]
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	2301      	movs	r3, #1
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	2200      	movs	r2, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 fb13 	bl	8009c22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b088      	sub	sp, #32
 800960a:	af04      	add	r7, sp, #16
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	4611      	mov	r1, r2
 8009612:	461a      	mov	r2, r3
 8009614:	460b      	mov	r3, r1
 8009616:	80fb      	strh	r3, [r7, #6]
 8009618:	4613      	mov	r3, r2
 800961a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800961c:	7979      	ldrb	r1, [r7, #5]
 800961e:	2300      	movs	r3, #0
 8009620:	9303      	str	r3, [sp, #12]
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	9302      	str	r3, [sp, #8]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	2301      	movs	r3, #1
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	2201      	movs	r2, #1
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 faf5 	bl	8009c22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009638:	2300      	movs	r3, #0

}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af04      	add	r7, sp, #16
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	4611      	mov	r1, r2
 800964e:	461a      	mov	r2, r3
 8009650:	460b      	mov	r3, r1
 8009652:	80fb      	strh	r3, [r7, #6]
 8009654:	4613      	mov	r3, r2
 8009656:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009666:	7979      	ldrb	r1, [r7, #5]
 8009668:	7e3b      	ldrb	r3, [r7, #24]
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	9302      	str	r3, [sp, #8]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	2301      	movs	r3, #1
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	2302      	movs	r3, #2
 800967a:	2200      	movs	r2, #0
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 fad0 	bl	8009c22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af04      	add	r7, sp, #16
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4611      	mov	r1, r2
 8009698:	461a      	mov	r2, r3
 800969a:	460b      	mov	r3, r1
 800969c:	80fb      	strh	r3, [r7, #6]
 800969e:	4613      	mov	r3, r2
 80096a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096a2:	7979      	ldrb	r1, [r7, #5]
 80096a4:	2300      	movs	r3, #0
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	88fb      	ldrh	r3, [r7, #6]
 80096aa:	9302      	str	r3, [sp, #8]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	2301      	movs	r3, #1
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2302      	movs	r3, #2
 80096b6:	2201      	movs	r2, #1
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fab2 	bl	8009c22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	70fb      	strb	r3, [r7, #3]
 80096da:	460b      	mov	r3, r1
 80096dc:	70bb      	strb	r3, [r7, #2]
 80096de:	4613      	mov	r3, r2
 80096e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096e2:	7878      	ldrb	r0, [r7, #1]
 80096e4:	78ba      	ldrb	r2, [r7, #2]
 80096e6:	78f9      	ldrb	r1, [r7, #3]
 80096e8:	8b3b      	ldrh	r3, [r7, #24]
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	7d3b      	ldrb	r3, [r7, #20]
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	7c3b      	ldrb	r3, [r7, #16]
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	4603      	mov	r3, r0
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fa45 	bl	8009b86 <USBH_LL_OpenPipe>

  return USBH_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa64 	bl	8009be4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f836 	bl	80097a4 <USBH_GetFreePipe>
 8009738:	4603      	mov	r3, r0
 800973a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800973c:	89fb      	ldrh	r3, [r7, #14]
 800973e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009742:	4293      	cmp	r3, r2
 8009744:	d00a      	beq.n	800975c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	89fb      	ldrh	r3, [r7, #14]
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	33e0      	adds	r3, #224	; 0xe0
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800975c:	89fb      	ldrh	r3, [r7, #14]
 800975e:	b2db      	uxtb	r3, r3
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	2b0f      	cmp	r3, #15
 8009778:	d80d      	bhi.n	8009796 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	33e0      	adds	r3, #224	; 0xe0
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	33e0      	adds	r3, #224	; 0xe0
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
 80097b4:	e00f      	b.n	80097d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	33e0      	adds	r3, #224	; 0xe0
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	e007      	b.n	80097e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	3301      	adds	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	2b0f      	cmp	r3, #15
 80097da:	d9ec      	bls.n	80097b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80097f0:	2201      	movs	r2, #1
 80097f2:	490e      	ldr	r1, [pc, #56]	; (800982c <MX_USB_HOST_Init+0x40>)
 80097f4:	480e      	ldr	r0, [pc, #56]	; (8009830 <MX_USB_HOST_Init+0x44>)
 80097f6:	f7fe fba7 	bl	8007f48 <USBH_Init>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009800:	f7f8 f974 	bl	8001aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009804:	490b      	ldr	r1, [pc, #44]	; (8009834 <MX_USB_HOST_Init+0x48>)
 8009806:	480a      	ldr	r0, [pc, #40]	; (8009830 <MX_USB_HOST_Init+0x44>)
 8009808:	f7fe fc2c 	bl	8008064 <USBH_RegisterClass>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009812:	f7f8 f96b 	bl	8001aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009816:	4806      	ldr	r0, [pc, #24]	; (8009830 <MX_USB_HOST_Init+0x44>)
 8009818:	f7fe fcb0 	bl	800817c <USBH_Start>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009822:	f7f8 f963 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009826:	bf00      	nop
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	0800984d 	.word	0x0800984d
 8009830:	20000300 	.word	0x20000300
 8009834:	2000000c 	.word	0x2000000c

08009838 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800983c:	4802      	ldr	r0, [pc, #8]	; (8009848 <MX_USB_HOST_Process+0x10>)
 800983e:	f7fe fcad 	bl	800819c <USBH_Process>
}
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000300 	.word	0x20000300

0800984c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	3b01      	subs	r3, #1
 800985c:	2b04      	cmp	r3, #4
 800985e:	d819      	bhi.n	8009894 <USBH_UserProcess+0x48>
 8009860:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <USBH_UserProcess+0x1c>)
 8009862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009866:	bf00      	nop
 8009868:	08009895 	.word	0x08009895
 800986c:	08009885 	.word	0x08009885
 8009870:	08009895 	.word	0x08009895
 8009874:	0800988d 	.word	0x0800988d
 8009878:	0800987d 	.word	0x0800987d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <USBH_UserProcess+0x58>)
 800987e:	2203      	movs	r2, #3
 8009880:	701a      	strb	r2, [r3, #0]
  break;
 8009882:	e008      	b.n	8009896 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <USBH_UserProcess+0x58>)
 8009886:	2202      	movs	r2, #2
 8009888:	701a      	strb	r2, [r3, #0]
  break;
 800988a:	e004      	b.n	8009896 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <USBH_UserProcess+0x58>)
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
  break;
 8009892:	e000      	b.n	8009896 <USBH_UserProcess+0x4a>

  default:
  break;
 8009894:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200006d8 	.word	0x200006d8

080098a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098b0:	f107 0314 	add.w	r3, r7, #20
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	609a      	str	r2, [r3, #8]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c8:	d13a      	bne.n	8009940 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	4a1d      	ldr	r2, [pc, #116]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 80098d4:	f043 0301 	orr.w	r3, r3, #1
 80098d8:	6313      	str	r3, [r2, #48]	; 0x30
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80098e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ec:	2302      	movs	r3, #2
 80098ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098f4:	2300      	movs	r3, #0
 80098f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098f8:	230a      	movs	r3, #10
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098fc:	f107 0314 	add.w	r3, r7, #20
 8009900:	4619      	mov	r1, r3
 8009902:	4812      	ldr	r0, [pc, #72]	; (800994c <HAL_HCD_MspInit+0xa4>)
 8009904:	f7f8 fd6c 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009908:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 800990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990c:	4a0e      	ldr	r2, [pc, #56]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 800990e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009912:	6353      	str	r3, [r2, #52]	; 0x34
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	4a0a      	ldr	r2, [pc, #40]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 800991e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009922:	6453      	str	r3, [r2, #68]	; 0x44
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <HAL_HCD_MspInit+0xa0>)
 8009926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009930:	2200      	movs	r2, #0
 8009932:	2100      	movs	r1, #0
 8009934:	2043      	movs	r0, #67	; 0x43
 8009936:	f7f8 fd1c 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800993a:	2043      	movs	r0, #67	; 0x43
 800993c:	f7f8 fd35 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009940:	bf00      	nop
 8009942:	3728      	adds	r7, #40	; 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	40023800 	.word	0x40023800
 800994c:	40020000 	.word	0x40020000

08009950 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fffb 	bl	800895a <USBH_LL_IncTimer>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff f833 	bl	80089e6 <USBH_LL_Connect>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff f83c 	bl	8008a14 <USBH_LL_Disconnect>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
 80099b0:	4613      	mov	r3, r2
 80099b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe ffed 	bl	80089ae <USBH_LL_PortEnabled>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe ffed 	bl	80089ca <USBH_LL_PortDisabled>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d12a      	bne.n	8009a60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009a0a:	4a18      	ldr	r2, [pc, #96]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a15      	ldr	r2, [pc, #84]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a24:	2208      	movs	r2, #8
 8009a26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009a28:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009a34:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a36:	2202      	movs	r2, #2
 8009a38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a3a:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009a40:	480a      	ldr	r0, [pc, #40]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a42:	f7f8 fe9a 	bl	800277a <HAL_HCD_Init>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009a4c:	f7f8 f84e 	bl	8001aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009a50:	4806      	ldr	r0, [pc, #24]	; (8009a6c <USBH_LL_Init+0x74>)
 8009a52:	f7f9 fa7e 	bl	8002f52 <HAL_HCD_GetCurrentFrame>
 8009a56:	4603      	mov	r3, r0
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7fe ff6e 	bl	800893c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200006dc 	.word	0x200006dc

08009a70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f9 f9ed 	bl	8002e66 <HAL_HCD_Start>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f95c 	bl	8009d50 <USBH_Get_USB_Status>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f9 f9f5 	bl	8002eac <HAL_HCD_Stop>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f941 	bl	8009d50 <USBH_Get_USB_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f9 fa3d 	bl	8002f6e <HAL_HCD_GetCurrentSpeed>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d00c      	beq.n	8009b14 <USBH_LL_GetSpeed+0x38>
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d80d      	bhi.n	8009b1a <USBH_LL_GetSpeed+0x3e>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <USBH_LL_GetSpeed+0x2c>
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d003      	beq.n	8009b0e <USBH_LL_GetSpeed+0x32>
 8009b06:	e008      	b.n	8009b1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0c:	e008      	b.n	8009b20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	73fb      	strb	r3, [r7, #15]
    break;
 8009b12:	e005      	b.n	8009b20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009b14:	2302      	movs	r3, #2
 8009b16:	73fb      	strb	r3, [r7, #15]
    break;
 8009b18:	e002      	b.n	8009b20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1e:	bf00      	nop
  }
  return  speed;
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f9 f9d0 	bl	8002ee6 <HAL_HCD_ResetPort>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 f8ff 	bl	8009d50 <USBH_Get_USB_Status>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7f9 f9d7 	bl	8002f2a <HAL_HCD_HC_GetXferCount>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b86:	b590      	push	{r4, r7, lr}
 8009b88:	b089      	sub	sp, #36	; 0x24
 8009b8a:	af04      	add	r7, sp, #16
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	461a      	mov	r2, r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	70fb      	strb	r3, [r7, #3]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70bb      	strb	r3, [r7, #2]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bae:	787c      	ldrb	r4, [r7, #1]
 8009bb0:	78ba      	ldrb	r2, [r7, #2]
 8009bb2:	78f9      	ldrb	r1, [r7, #3]
 8009bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4623      	mov	r3, r4
 8009bc6:	f7f8 fe3a 	bl	800283e <HAL_HCD_HC_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f8bd 	bl	8009d50 <USBH_Get_USB_Status>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd90      	pop	{r4, r7, pc}

08009be4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f8 feaa 	bl	800295c <HAL_HCD_HC_Halt>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f89e 	bl	8009d50 <USBH_Get_USB_Status>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009c22:	b590      	push	{r4, r7, lr}
 8009c24:	b089      	sub	sp, #36	; 0x24
 8009c26:	af04      	add	r7, sp, #16
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4603      	mov	r3, r0
 8009c32:	70fb      	strb	r3, [r7, #3]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70bb      	strb	r3, [r7, #2]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c4a:	787c      	ldrb	r4, [r7, #1]
 8009c4c:	78ba      	ldrb	r2, [r7, #2]
 8009c4e:	78f9      	ldrb	r1, [r7, #3]
 8009c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	4623      	mov	r3, r4
 8009c66:	f7f8 fe9d 	bl	80029a4 <HAL_HCD_HC_SubmitRequest>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f86d 	bl	8009d50 <USBH_Get_USB_Status>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd90      	pop	{r4, r7, pc}

08009c84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f9 f931 	bl	8002f02 <HAL_HCD_HC_GetURBState>
 8009ca0:	4603      	mov	r3, r0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d103      	bne.n	8009cc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 f870 	bl	8009da8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009cc8:	20c8      	movs	r0, #200	; 0xc8
 8009cca:	f7f8 fa53 	bl	8002174 <HAL_Delay>
  return USBH_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	212c      	movs	r1, #44	; 0x2c
 8009cf6:	fb01 f303 	mul.w	r3, r1, r3
 8009cfa:	4413      	add	r3, r2
 8009cfc:	333b      	adds	r3, #59	; 0x3b
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d009      	beq.n	8009d18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	212c      	movs	r1, #44	; 0x2c
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	4413      	add	r3, r2
 8009d10:	3354      	adds	r3, #84	; 0x54
 8009d12:	78ba      	ldrb	r2, [r7, #2]
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e008      	b.n	8009d2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	212c      	movs	r1, #44	; 0x2c
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	3355      	adds	r3, #85	; 0x55
 8009d26:	78ba      	ldrb	r2, [r7, #2]
 8009d28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7f8 fa17 	bl	8002174 <HAL_Delay>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d817      	bhi.n	8009d94 <USBH_Get_USB_Status+0x44>
 8009d64:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <USBH_Get_USB_Status+0x1c>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d7d 	.word	0x08009d7d
 8009d70:	08009d83 	.word	0x08009d83
 8009d74:	08009d89 	.word	0x08009d89
 8009d78:	08009d8f 	.word	0x08009d8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d80:	e00b      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	73fb      	strb	r3, [r7, #15]
    break;
 8009d86:	e008      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8c:	e005      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	73fb      	strb	r3, [r7, #15]
    break;
 8009d92:	e002      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d94:	2302      	movs	r3, #2
 8009d96:	73fb      	strb	r3, [r7, #15]
    break;
 8009d98:	bf00      	nop
  }
  return usb_status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
 8009dc0:	e001      	b.n	8009dc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4803      	ldr	r0, [pc, #12]	; (8009ddc <MX_DriverVbusFS+0x34>)
 8009dce:	f7f8 fcbb 	bl	8002748 <HAL_GPIO_WritePin>
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	40020800 	.word	0x40020800

08009de0 <__errno>:
 8009de0:	4b01      	ldr	r3, [pc, #4]	; (8009de8 <__errno+0x8>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	2000002c 	.word	0x2000002c

08009dec <__libc_init_array>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	4d0d      	ldr	r5, [pc, #52]	; (8009e24 <__libc_init_array+0x38>)
 8009df0:	4c0d      	ldr	r4, [pc, #52]	; (8009e28 <__libc_init_array+0x3c>)
 8009df2:	1b64      	subs	r4, r4, r5
 8009df4:	10a4      	asrs	r4, r4, #2
 8009df6:	2600      	movs	r6, #0
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	d109      	bne.n	8009e10 <__libc_init_array+0x24>
 8009dfc:	4d0b      	ldr	r5, [pc, #44]	; (8009e2c <__libc_init_array+0x40>)
 8009dfe:	4c0c      	ldr	r4, [pc, #48]	; (8009e30 <__libc_init_array+0x44>)
 8009e00:	f000 f92e 	bl	800a060 <_init>
 8009e04:	1b64      	subs	r4, r4, r5
 8009e06:	10a4      	asrs	r4, r4, #2
 8009e08:	2600      	movs	r6, #0
 8009e0a:	42a6      	cmp	r6, r4
 8009e0c:	d105      	bne.n	8009e1a <__libc_init_array+0x2e>
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}
 8009e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e14:	4798      	blx	r3
 8009e16:	3601      	adds	r6, #1
 8009e18:	e7ee      	b.n	8009df8 <__libc_init_array+0xc>
 8009e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e1e:	4798      	blx	r3
 8009e20:	3601      	adds	r6, #1
 8009e22:	e7f2      	b.n	8009e0a <__libc_init_array+0x1e>
 8009e24:	0800a09c 	.word	0x0800a09c
 8009e28:	0800a09c 	.word	0x0800a09c
 8009e2c:	0800a09c 	.word	0x0800a09c
 8009e30:	0800a0a0 	.word	0x0800a0a0

08009e34 <malloc>:
 8009e34:	4b02      	ldr	r3, [pc, #8]	; (8009e40 <malloc+0xc>)
 8009e36:	4601      	mov	r1, r0
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f000 b87f 	b.w	8009f3c <_malloc_r>
 8009e3e:	bf00      	nop
 8009e40:	2000002c 	.word	0x2000002c

08009e44 <free>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <free+0xc>)
 8009e46:	4601      	mov	r1, r0
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f000 b80b 	b.w	8009e64 <_free_r>
 8009e4e:	bf00      	nop
 8009e50:	2000002c 	.word	0x2000002c

08009e54 <memset>:
 8009e54:	4402      	add	r2, r0
 8009e56:	4603      	mov	r3, r0
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d100      	bne.n	8009e5e <memset+0xa>
 8009e5c:	4770      	bx	lr
 8009e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e62:	e7f9      	b.n	8009e58 <memset+0x4>

08009e64 <_free_r>:
 8009e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d044      	beq.n	8009ef4 <_free_r+0x90>
 8009e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e6e:	9001      	str	r0, [sp, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f1a1 0404 	sub.w	r4, r1, #4
 8009e76:	bfb8      	it	lt
 8009e78:	18e4      	addlt	r4, r4, r3
 8009e7a:	f000 f8e3 	bl	800a044 <__malloc_lock>
 8009e7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ef8 <_free_r+0x94>)
 8009e80:	9801      	ldr	r0, [sp, #4]
 8009e82:	6813      	ldr	r3, [r2, #0]
 8009e84:	b933      	cbnz	r3, 8009e94 <_free_r+0x30>
 8009e86:	6063      	str	r3, [r4, #4]
 8009e88:	6014      	str	r4, [r2, #0]
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e90:	f000 b8de 	b.w	800a050 <__malloc_unlock>
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	d908      	bls.n	8009eaa <_free_r+0x46>
 8009e98:	6825      	ldr	r5, [r4, #0]
 8009e9a:	1961      	adds	r1, r4, r5
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	bf01      	itttt	eq
 8009ea0:	6819      	ldreq	r1, [r3, #0]
 8009ea2:	685b      	ldreq	r3, [r3, #4]
 8009ea4:	1949      	addeq	r1, r1, r5
 8009ea6:	6021      	streq	r1, [r4, #0]
 8009ea8:	e7ed      	b.n	8009e86 <_free_r+0x22>
 8009eaa:	461a      	mov	r2, r3
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	b10b      	cbz	r3, 8009eb4 <_free_r+0x50>
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d9fa      	bls.n	8009eaa <_free_r+0x46>
 8009eb4:	6811      	ldr	r1, [r2, #0]
 8009eb6:	1855      	adds	r5, r2, r1
 8009eb8:	42a5      	cmp	r5, r4
 8009eba:	d10b      	bne.n	8009ed4 <_free_r+0x70>
 8009ebc:	6824      	ldr	r4, [r4, #0]
 8009ebe:	4421      	add	r1, r4
 8009ec0:	1854      	adds	r4, r2, r1
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	6011      	str	r1, [r2, #0]
 8009ec6:	d1e0      	bne.n	8009e8a <_free_r+0x26>
 8009ec8:	681c      	ldr	r4, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	6053      	str	r3, [r2, #4]
 8009ece:	4421      	add	r1, r4
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	e7da      	b.n	8009e8a <_free_r+0x26>
 8009ed4:	d902      	bls.n	8009edc <_free_r+0x78>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	e7d6      	b.n	8009e8a <_free_r+0x26>
 8009edc:	6825      	ldr	r5, [r4, #0]
 8009ede:	1961      	adds	r1, r4, r5
 8009ee0:	428b      	cmp	r3, r1
 8009ee2:	bf04      	itt	eq
 8009ee4:	6819      	ldreq	r1, [r3, #0]
 8009ee6:	685b      	ldreq	r3, [r3, #4]
 8009ee8:	6063      	str	r3, [r4, #4]
 8009eea:	bf04      	itt	eq
 8009eec:	1949      	addeq	r1, r1, r5
 8009eee:	6021      	streq	r1, [r4, #0]
 8009ef0:	6054      	str	r4, [r2, #4]
 8009ef2:	e7ca      	b.n	8009e8a <_free_r+0x26>
 8009ef4:	b003      	add	sp, #12
 8009ef6:	bd30      	pop	{r4, r5, pc}
 8009ef8:	200009e0 	.word	0x200009e0

08009efc <sbrk_aligned>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4e0e      	ldr	r6, [pc, #56]	; (8009f38 <sbrk_aligned+0x3c>)
 8009f00:	460c      	mov	r4, r1
 8009f02:	6831      	ldr	r1, [r6, #0]
 8009f04:	4605      	mov	r5, r0
 8009f06:	b911      	cbnz	r1, 8009f0e <sbrk_aligned+0x12>
 8009f08:	f000 f88c 	bl	800a024 <_sbrk_r>
 8009f0c:	6030      	str	r0, [r6, #0]
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4628      	mov	r0, r5
 8009f12:	f000 f887 	bl	800a024 <_sbrk_r>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d00a      	beq.n	8009f30 <sbrk_aligned+0x34>
 8009f1a:	1cc4      	adds	r4, r0, #3
 8009f1c:	f024 0403 	bic.w	r4, r4, #3
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d007      	beq.n	8009f34 <sbrk_aligned+0x38>
 8009f24:	1a21      	subs	r1, r4, r0
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 f87c 	bl	800a024 <_sbrk_r>
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d101      	bne.n	8009f34 <sbrk_aligned+0x38>
 8009f30:	f04f 34ff 	mov.w	r4, #4294967295
 8009f34:	4620      	mov	r0, r4
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	200009e4 	.word	0x200009e4

08009f3c <_malloc_r>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	1ccd      	adds	r5, r1, #3
 8009f42:	f025 0503 	bic.w	r5, r5, #3
 8009f46:	3508      	adds	r5, #8
 8009f48:	2d0c      	cmp	r5, #12
 8009f4a:	bf38      	it	cc
 8009f4c:	250c      	movcc	r5, #12
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	4607      	mov	r7, r0
 8009f52:	db01      	blt.n	8009f58 <_malloc_r+0x1c>
 8009f54:	42a9      	cmp	r1, r5
 8009f56:	d905      	bls.n	8009f64 <_malloc_r+0x28>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	2600      	movs	r6, #0
 8009f5e:	4630      	mov	r0, r6
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	4e2e      	ldr	r6, [pc, #184]	; (800a020 <_malloc_r+0xe4>)
 8009f66:	f000 f86d 	bl	800a044 <__malloc_lock>
 8009f6a:	6833      	ldr	r3, [r6, #0]
 8009f6c:	461c      	mov	r4, r3
 8009f6e:	bb34      	cbnz	r4, 8009fbe <_malloc_r+0x82>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4638      	mov	r0, r7
 8009f74:	f7ff ffc2 	bl	8009efc <sbrk_aligned>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	d14d      	bne.n	800a01a <_malloc_r+0xde>
 8009f7e:	6834      	ldr	r4, [r6, #0]
 8009f80:	4626      	mov	r6, r4
 8009f82:	2e00      	cmp	r6, #0
 8009f84:	d140      	bne.n	800a008 <_malloc_r+0xcc>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	eb04 0803 	add.w	r8, r4, r3
 8009f90:	f000 f848 	bl	800a024 <_sbrk_r>
 8009f94:	4580      	cmp	r8, r0
 8009f96:	d13a      	bne.n	800a00e <_malloc_r+0xd2>
 8009f98:	6821      	ldr	r1, [r4, #0]
 8009f9a:	3503      	adds	r5, #3
 8009f9c:	1a6d      	subs	r5, r5, r1
 8009f9e:	f025 0503 	bic.w	r5, r5, #3
 8009fa2:	3508      	adds	r5, #8
 8009fa4:	2d0c      	cmp	r5, #12
 8009fa6:	bf38      	it	cc
 8009fa8:	250c      	movcc	r5, #12
 8009faa:	4629      	mov	r1, r5
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7ff ffa5 	bl	8009efc <sbrk_aligned>
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d02b      	beq.n	800a00e <_malloc_r+0xd2>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	442b      	add	r3, r5
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	e00e      	b.n	8009fdc <_malloc_r+0xa0>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	1b52      	subs	r2, r2, r5
 8009fc2:	d41e      	bmi.n	800a002 <_malloc_r+0xc6>
 8009fc4:	2a0b      	cmp	r2, #11
 8009fc6:	d916      	bls.n	8009ff6 <_malloc_r+0xba>
 8009fc8:	1961      	adds	r1, r4, r5
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	6025      	str	r5, [r4, #0]
 8009fce:	bf18      	it	ne
 8009fd0:	6059      	strne	r1, [r3, #4]
 8009fd2:	6863      	ldr	r3, [r4, #4]
 8009fd4:	bf08      	it	eq
 8009fd6:	6031      	streq	r1, [r6, #0]
 8009fd8:	5162      	str	r2, [r4, r5]
 8009fda:	604b      	str	r3, [r1, #4]
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f104 060b 	add.w	r6, r4, #11
 8009fe2:	f000 f835 	bl	800a050 <__malloc_unlock>
 8009fe6:	f026 0607 	bic.w	r6, r6, #7
 8009fea:	1d23      	adds	r3, r4, #4
 8009fec:	1af2      	subs	r2, r6, r3
 8009fee:	d0b6      	beq.n	8009f5e <_malloc_r+0x22>
 8009ff0:	1b9b      	subs	r3, r3, r6
 8009ff2:	50a3      	str	r3, [r4, r2]
 8009ff4:	e7b3      	b.n	8009f5e <_malloc_r+0x22>
 8009ff6:	6862      	ldr	r2, [r4, #4]
 8009ff8:	42a3      	cmp	r3, r4
 8009ffa:	bf0c      	ite	eq
 8009ffc:	6032      	streq	r2, [r6, #0]
 8009ffe:	605a      	strne	r2, [r3, #4]
 800a000:	e7ec      	b.n	8009fdc <_malloc_r+0xa0>
 800a002:	4623      	mov	r3, r4
 800a004:	6864      	ldr	r4, [r4, #4]
 800a006:	e7b2      	b.n	8009f6e <_malloc_r+0x32>
 800a008:	4634      	mov	r4, r6
 800a00a:	6876      	ldr	r6, [r6, #4]
 800a00c:	e7b9      	b.n	8009f82 <_malloc_r+0x46>
 800a00e:	230c      	movs	r3, #12
 800a010:	603b      	str	r3, [r7, #0]
 800a012:	4638      	mov	r0, r7
 800a014:	f000 f81c 	bl	800a050 <__malloc_unlock>
 800a018:	e7a1      	b.n	8009f5e <_malloc_r+0x22>
 800a01a:	6025      	str	r5, [r4, #0]
 800a01c:	e7de      	b.n	8009fdc <_malloc_r+0xa0>
 800a01e:	bf00      	nop
 800a020:	200009e0 	.word	0x200009e0

0800a024 <_sbrk_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	; (800a040 <_sbrk_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f7 ffbc 	bl	8001fac <_sbrk>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_sbrk_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_sbrk_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	200009e8 	.word	0x200009e8

0800a044 <__malloc_lock>:
 800a044:	4801      	ldr	r0, [pc, #4]	; (800a04c <__malloc_lock+0x8>)
 800a046:	f000 b809 	b.w	800a05c <__retarget_lock_acquire_recursive>
 800a04a:	bf00      	nop
 800a04c:	200009ec 	.word	0x200009ec

0800a050 <__malloc_unlock>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__malloc_unlock+0x8>)
 800a052:	f000 b804 	b.w	800a05e <__retarget_lock_release_recursive>
 800a056:	bf00      	nop
 800a058:	200009ec 	.word	0x200009ec

0800a05c <__retarget_lock_acquire_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <__retarget_lock_release_recursive>:
 800a05e:	4770      	bx	lr

0800a060 <_init>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr

0800a06c <_fini>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	bf00      	nop
 800a070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a072:	bc08      	pop	{r3}
 800a074:	469e      	mov	lr, r3
 800a076:	4770      	bx	lr
